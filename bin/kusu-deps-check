#!/usr/bin/env python
# $Id$
#
# Copyright 2007 Platform Computing Inc.
#
# Licensed under GPL version 2; See LICENSE for details.

import sys
import os
import gettext
from optparse import OptionParser
import subprocess

# exceptions
class DepsNotFound(Exception): pass

# constants
TOOLS_DEPS = ['cpio', 'mount', 'umount', 'file', 'strings', 'zcat', 
    'mkisofs', 'tar', 'gzip', 'rpmbuild', 'cmake', 'make', 'rpm', 'python']
    
NONPY_LIBS_DEPS = ['libsqlite','libnewt','libparted']

PY_LIBS_DEPS = ['parted']

SITE_URL = 'http://www.osgdc.org/project/kusu/wiki/DevelopersCorner'

def checkPyLibDeps(lib):
    """ Check if the specified python library is installed and accessible.
        Raises DepsNotFound exception if fail.
    """
    
    c = 'python -c "import %s"' % lib
    libP = subprocess.Popen(c,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    libP.communicate()
    
    if libP.returncode <> 0:
        raise DepsNotFound, lib
        
    return True
    
def checkNonPyLibDeps(lib, searchpath=None):
    """ Check if the specified library is installed and accessible.
        A searchpath can be specified for alternative locations.
        Raises DepsNotFound exception if fail.        
    """
    
    if not searchpath: 
        c = 'find /usr/lib -name "%s*"' % lib
    else:
        c = 'find %s -name "%s*"' % lib
        
    libP = subprocess.Popen(c,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    out,err = libP.communicate()
    
    if not out:
        raise DepsNotFound, lib
    
    return True
    

def checkToolDeps(tool):
    """ Check if the tool is indeed available. A ToolNotFound exception 
        will be thrown if any of the tools are missing.
        Raises DepsNotFound exception if fail.        
    """

    cmd = 'which %s > /dev/null 2>&1' % tool
    whichP = subprocess.Popen(cmd,shell=True)
    whichP.communicate()
    if whichP.returncode <> 0:
        raise DepsNotFound, tool

    return True


class KusuDepsCheckApp(object):
    """ Application class"""
    def __init__(self):
        super(KusuDepsCheckApp, self).__init__()
        
    def printMsgExit(self,msg):
        print msg
        sys.exit(2)

    def run(self):
        """Main launcher"""
        
        try:
            # check the list of tools
            print "Checking tools' dependencies:"
            for tool in TOOLS_DEPS:
                msg = "checking %s..." % tool
                print msg,
                if checkToolDeps(tool):
                    print "yes"
            
            # check the list of non-python libs
            print "Checking non-python libraries' dependencies:"
            for lib in NONPY_LIBS_DEPS:
                msg = "checking %s..." % lib
                print msg,
                if checkNonPyLibDeps(lib):
                    print "yes"
                            
            # check the list of tools
            print "Checking python dependencies:"
            for lib in PY_LIBS_DEPS:
                msg = "checking %s..." % lib
                print msg,
                if checkPyLibDeps(lib):
                    print "yes"

        except DepsNotFound, e:
            print "%s not found! Please ensure that it is available!", e
        
        
        sys.exit(0)

if __name__ == '__main__':
    app = KusuDepsCheckApp()
    app.run()
    
