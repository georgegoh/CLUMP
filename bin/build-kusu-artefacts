#!/usr/bin/env python
# $Id$
#
# Copyright 2007 Platform Computing Corporation.
#
# Licensed under GPL version 2; See LICENSE for details.
#
# Author: Najib Ninaba <najib@osgdc.org>
#

import sys
import os
from optparse import OptionParser
import tempfile
import subprocess
import shutil
import gettext
from distutils.sysconfig import parse_makefile

# exceptions
class CopyError(Exception): pass
class FilePathError(Exception): pass
class FileAlreadyExists(Exception): pass
class FailedBuildCMake(Exception): pass
class FailedBuildMake(Exception): pass
class FailedToRun(Exception): pass
class UnsupportedDistro(Exception): pass
class NotPriviledgedUser(Exception): pass
class InvalidKusuSource(Exception): pass
class ToolNotFound(Exception): pass

# constants
SUPPORTED_DISTROS = ['centos', 'fedora', 'rhel']
USES_ANACONDA = ['centos', 'fedora', 'rhel']
SUPPORTED_ARCH = ['i386', 'x86_64']

KUSU_MODULES = ['autoinstall','boot','core','util','ui',
    'partitiontool','installer','nodeinstaller','networktool',
    'hardware','kitops','repoman']

KUSU_3RDPARTY = ['pysqlite','path','md5crypt','cheetah','urlgrabber',
    'wget','thttpd','sqlalchemy','createrepo',]
    
SUPPORTED_KUSU_ENVARS = ['KUSU_BUILD_DIST', 'KUSU_INSTALL_PREFIX', 
                        'KUSU_BUILD_DISTVER', 'KUSU_BUILD_ARCH',
                        'KUSU_ROOT', 'KUSU_DEVEL_ROOT',
                        'KUSU_BUILD_ISOBIN', 'KUSU_DISTRO_SRC',
                        'KUSU_CACHE_DIR', 'KUSU_DIST',
                        'KUSU_DISTVER', 'KUSU_TMP',
                        'KUSU_LOGLEVEL', 'KUSU_LOGFILE']

def prepareEnv():
    """ Creates an clean environment stripped out of any KUSU references.
        Returns an environment dict.
    """
    env = os.environ.copy()

    # get the kusuroot for stripping PATH and PYTHONPATH later
    kusuroot = None
    kusurootbin = kusurootsbin = None
    kusupypath = None
    if 'KUSU_ROOT' in env.keys():
        kusuroot = env['KUSU_ROOT']
        kusurootbin = '%s/bin' % kusuroot
        kusurootsbin = '%s/sbin' % kusuroot
        kusupypath = '%s/lib/python' % kusuroot


    # remove each KUSU reference from the environment if it exists.
    for key in SUPPORTED_KUSU_ENVARS:
        if key in env:
            del env[key]

    # strip out PATH
    li = env['PATH'].split(':')
    p = []
    if kusuroot:
        for l in li:
            if l.find(kusurootbin) == -1 and l.find(kusurootsbin) == -1:
                p.append(l)

        del env['PATH']
        env['PATH'] = ':'.join(p)


        # strip out PYTHONPATH
        if 'PYTHONPATH' in env:
            li = env['PYTHONPATH'].split(':')
            p = []
            for l in li:
                if l.find(kusupypath) == -1 and l:
                    p.append(l)

            del env['PYTHONPATH']
            if p: env['PYTHONPATH'] = ':'.join(p)


    return env    

def checkToolDeps(tool):
    """ Check if the tool is indeed available. Returns the path. A ToolNotFound exception 
        will be thrown if any of the tools are missing.
    """

    cmd = 'which %s' % tool
    env = prepareEnv()
    whichP = subprocess.Popen(cmd,shell=True,env=env,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    out, err = whichP.communicate()
    if whichP.returncode <> 0:
        raise ToolNotFound, tool

    return out.strip('\n')



def cpio_copytree(src,dst):
    """A cpio-based copytree functionality. Only use this when shutil.copytree don't cut
       it.
    """
        
    # convert paths to be absolute
    src = os.path.abspath(src)
    dst = os.path.abspath(dst)
    cwd = src

    if not os.path.exists(cwd): raise IOError, "Source directory does not exist!"

    # create the dst directory if it doesn't exist initially
    if not os.path.exists(dst):
        parentdir = os.path.join(dst,os.path.pardir)
        if os.access(parentdir,os.R_OK|os.W_OK):
            os.path.mkdir(dst)
        else:
            raise IOError, "No read/write permissions in parent directory!"
    else:
        if not os.access(dst,os.R_OK|os.W_OK): raise IOError, "No read/write permissions in destination directory!"


    findP = subprocess.Popen('find .',cwd=cwd,shell=True,stdout=subprocess.PIPE)
    cpioP = subprocess.Popen('cpio -mpdu --quiet %s' % dst,cwd=cwd,stdin=findP.stdout,shell=True)
    cpioP.communicate()
    return cpioP.returncode
    
class KusuRuntime(object):
    """ This class contains data and methods for Kusu Runtime operations. """
    def __init__(self, kusuroot, tool=None):
        super(KusuRuntime, self).__init__()
        self.kusuroot = kusuroot
        self.tool = tool
        
    def verifyPath(self):
        """ verify that the kusuroot exists"""
        if not os.path.exists(self.kusuroot): return False
        
        if not os.path.exists(os.path.join(self.kusuroot,'bin',self.tool)):
            return False
            
        return True
        
    def run(self, action, **kwargs):
        """ Runs the tool with the action and arguments. """
        
        env = prepareEnv()
        p = ''.join([self.kusuroot,'/bin:',env['PATH']])
        env['PATH'] = p
        
        p = '%s/lib/python' % self.kusuroot
        env['PYTHONPATH'] = p
        
        li = []
        for k,v in kwargs.items():
            li.append(''.join([k,'=',v]))
            
        args = ' '.join(li)
        cmd = '%s %s %s' % (self.tool,action,args)
        runP = subprocess.Popen(cmd,shell=True,env=env)
        runP.communicate()
        
        if runP.returncode <> 0:
            raise FailedToRun


class KusuSVNSource:
    """ This class contains data and operations for working with Kusu SVN source. """
    
    def __init__(self, source, env=None):
        """ source refers to the Kusu SVN trunk source. env refers to a dict containing KUSU_* environment variables
            that can be used to control the build.
        """
        self.srcpath = os.path.abspath(source)
        self.isRemote = False
        self.develroot = None
        self.kusuroot = None
        self.scratchdir = None
        self.env = env
        self.verbose = False
        

        # These should describe the key directories/files that identify a Kusu SVN source layout.
        self.srcpathLayoutAttributes = {
            'bin' : 'bin',
            'build' : 'build',
            'CMakeLists' : 'CMakeLists.txt',
            'docs' : 'docs',
            'etc' : 'etc',
            'src' : 'src',
            'dists' : 'src/dists'
        }
        
        self.cmakebinarydirLayoutAttributes = {
            'cmakecache' : 'CMakeCache.txt',
            'cmakeinstall' : 'cmake_install.cmake',
            'Makefile'  : 'Makefile'
        }

    def verifySrcPath(self):
        """Call the correct verify*SrcPath method."""

        if self.isRemote:
            return self.verifyRemoteSrcPath()
        else:
            return self.verifyLocalSrcPath()

    def verifyLocalSrcPath(self):
        """Verify the path for attributes that describes a valid Kusu SVN source"""

        try:
            if not os.path.exists(self.srcpath): return False
        except AttributeError:
            # we could be testing on a NoneType object instead of a Path object
            return False

        # Check the path for each attribute listed, return if invalid path
        for k,v in self.srcpathLayoutAttributes.items():
            p = os.path.join(self.srcpath,v)
            if not os.path.exists(p): return False

        return True
        
    def verifyCMakeBinaryDir(self):
        """ Verify the path for attributes that describes a CMAKE_BINARY_DIR """
        try:
            if not os.path.exists(self.srcpath): return False
        except AttributeError:
            # we could be testing on a NoneType object instead of a Path object
            return False

        # Check the path for each attribute listed, return if invalid path
        for k,v in self.cmakebinarydirLayoutAttributes.items():
            p = os.path.join(self.srcpath,v)
            if not os.path.exists(p): return False

        return True
        
    def getCmakeSourceDir(self,makefile):
        """ Get the CMAKE_SOURCE_DIR which would point to a valid Kusu SVN Trunk """
        if not os.path.exists(makefile):
            return None
            
        d = parse_makefile(makefile)
        if 'CMAKE_SOURCE_DIR' in d:
            return d['CMAKE_SOURCE_DIR']
        else:
            return None
        
    def setup(self,develroot=None,kusuroot=None):
        """ General setup for Kusu develroot"""
        
        if not develroot:
            self.scratchdir = os.path.abspath(tempfile.mkdtemp(dir='/tmp',prefix='kusu-build'))
            self.develroot = os.path.abspath(tempfile.mkdtemp(dir=self.scratchdir))
        else:
            if os.path.exists(develroot):
                self.develroot = os.path.abspath(develroot)
            else:
                raise FilePathError, "Please ensure that the develroot %s exists!" \
                    % develroot
            
        if not kusuroot:
            self.kusuroot = os.path.join(self.develroot,'kusuroot')
        else:
            if os.path.exists(kusuroot):
                self.kusuroot = os.path.abspath(kusuroot)
            else:
                raise FilePathError, "Please ensure that the kusuroot %s exists!" \
                    % kusuroot
            
                
    def runCMake(self,kususrc=None):
        """ Run CMake within the Kusu develroot. This is a blocking call. """
        
        if not kususrc: kususrc = self.srcpath
        
        # increase verbosity
        env = os.environ
        if 'KUSU_VERBOSE' in env and env['KUSU_VERBOSE'] == '1':
            self.verbose = True
        else:
            self.verbose = False
            
        if self.verbose:
            cmd = 'cmake %s' % os.path.abspath(kususrc)
        else:
            cmd = 'cmake %s > /dev/null 2>&1' % os.path.abspath(kususrc)
        
        env = prepareEnv()
        cmakeP = subprocess.Popen(cmd,shell=True,
                    cwd=self.develroot,env=env)
        result = cmakeP.communicate()
        
        return cmakeP.returncode

        
    def runMake(self,target=None):
        """ Run make within the Kusu develroot. This is a blocking call. """
        
        # increase verbosity        
        env = os.environ
        if 'KUSU_VERBOSE' in env and env['KUSU_VERBOSE'] == '1':
            self.verbose = True
        else:
            self.verbose = False        
            
        if self.verbose:
            cmd = 'make'
            cmdtarget = 'make build-%s' % target
        else:
            cmd = 'make > /dev/null 2>&1'
            cmdtarget = 'make build-%s > /dev/null 2>&1' % target

        if not target:
            env = prepareEnv()
            makeP = subprocess.Popen(cmd,shell=True,
                        cwd=self.develroot,env=env)
        else:
            env = prepareEnv()
            makeP = subprocess.Popen(cmdtarget,shell=True,
                        cwd=self.develroot,env=env)
            
        result = makeP.communicate()

        return makeP.returncode
        
    def cleanupTransient(self):
        """ Clean up any transient artefacts not needed in the develroot"""
        
        # remove *.pyc and *.pyo
        cmd = "find %s -name '*py?' | xargs rm -f" % self.develroot
        cleanupP = subprocess.Popen(cmd,shell=True)
        cleanupP.communicate()
                
        # remove the kusudevenv.sh script
        cmd = "find %s -name 'kusudevenv.sh' | xargs rm -f" % self.develroot
        cleanupP = subprocess.Popen(cmd,shell=True)
        cleanupP.communicate()
        
    def cleanup(self):
        """ Housecleaning for Kusu develroot. """
        
        # remove the scratchtree when done
        if os.path.exists(self.kusuroot): shutil.rmtree(self.kusuroot)
        if os.path.exists(self.develroot): shutil.rmtree(self.develroot)
        if os.path.exists(self.scratchdir): shutil.rmtree(self.scratchdir)
        
    def run(self,target=None):
        """ Main launcher. """
        
        retcode = self.runCMake()
        if retcode <> 0:
            self.cleanup()
            raise FailedBuildCMake, "Failed CMake build for Kusu"

        if not target:
            retcode = self.runMake()
            if retcode <> 0:
                self.cleanup()
                raise FailedBuildMake, "Failed Make build for Kusu"
        else:
            retcode = self.runMake(target)
            if retcode <> 0:
                self.cleanup()
                raise FailedBuildMake, "Failed Make build for Kusu"
                
        self.cleanupTransient()              
        
    def copyKusuroot(self, dest, overwrite=False):
        """Copy the kusuroot file to a destination"""
        parentdir = os.path.abspath(os.path.join(dest,os.path.pardir))
        if os.access(parentdir,os.W_OK):
            # make sure that the existing destpath is accessible and writable
            cpio_copytree(self.kusuroot,dest)
        else:
            raise CopyError

class BuildKusuArtefactsApp(object):
    """ Application Class """
    def __init__(self):
        super(BuildKusuArtefactsApp, self).__init__()
        self._ = self.i18ninit()
        # actions list
        self.actions = {'build':['kususrc','modules','kusuroot'],
                        'list': [],
                        'make-ni-patch':['kususrc','os','version','arch','patch']}
        
        # action and actionargs will hold the current action and its arguments           
        self.action = None
        self.actionargs = None
        
        self.usagestr ="""\
build-kusu-artefacts <action> arg1=val1 arg2=val2 ...

build-kusu-artefacts will build the Kusu artecfacts and place the
built artefacts in the current directory.


actions:

    build           - Build and place the built kusu module artefacts in the 
                      current directory or in kusuroot if defined. Available 
                      arguments for this action:
                        kususrc=<directory containing Kusu Trunk>
                        kusuroot=<directory to place kusu module artefacts>
                        modules=<list of comma-separated module names 
                            or all to build all modules>
    
    make-ni-patch   - Make the nodeinstaller patchfile from the Kusu Trunk 
                      SVN source. Available arguments for this action:
                        kususrc=<directory containing Kusu Trunk>
                        os=<name of OS>
                        version=<version of OS>
                        arch=<architechure of OS>
                        patch=<name of nodeinstaller patchfile>
    
    list        - List the Kusu Runtime and dependencies modules that can
                  be built.

"""

        self.parser = OptionParser(self.usagestr)

    def i18ninit(self):
        """ i18n and l10n """
        langdomain = 'kusuapps'
        localedir  = ''

        # check if KUSU_ROOT environment exists
        kusuroot = os.environ.get('KUSU_ROOT',None)

        # Locate the Internationalization stuff
        if kusuroot and \
            os.path.exists('%s/share/locale' % kusuroot): 
            localedir = '%s/share/locale' % kusuroot 
        elif os.path.exists('../locale'):
            localedir = '../locale'
        else:
            # Try the system path
            if os.path.exists('/usr/share/locale'):
                localedir = '/usr/share/locale'

        gettext.bindtextdomain(langdomain, localedir)
        gettext.textdomain(langdomain)
        self.gettext = gettext.gettext
        return self.gettext
        
    def printUsageExit(self):
        """ Print usage text and exit. """
        print self.usagestr
        sys.stdout.write(os.linesep)
        sys.exit(0)

    def printMsgExit(self, msg):
        """ Print msg and exit. """
        print msg
        sys.stdout.write(os.linesep)
        sys.exit(1)

    def handleArgPairs(self, arglist):
        """ Handle the argument list and return a dict of key-value pairs. """

        li = []
        d = {}

        for s in arglist:
            li2 = s.split('=')
            for s2 in li2: 
                if s2: li.append(s2)        

        # There should be even number of items in order to make pairs
        if not len(li) % 2: 
            # Collect the pairs
            while li:
                d[li[0].lower()] = li[1]
                del li[0:2]

        return d

    def parseargs(self):
        """ App-specific arguments goes here. """

        self.options, self.args = self.parser.parse_args()
        
        if len(self.args) < 1: self.printUsageExit()

        # check if the first parsed argument is a supported action
        action = self.args[0]

        if action not in self.actions.keys():
            self.printUsageExit()
            
        if len(self.args) > 1:
            d = self.handleArgPairs(self.args[1:])

            # iterate keys in d and validate against the commands'
            # list of keys
            for k in d.keys():
                if k not in self.actions[action]:
                    self.printUsageExit()
        else:
            d = {}

        self.action = action
        self.actionargs = d

    def run(self):
        """ Main launcher. """
        
        self.parseargs()

        # call the correct sub-handler for the action
        m = '_' + self.action.split('-')[0] \
            + ''.join([l.capitalize() for l in self.action.split('-')[1:]])

        handler = getattr(self,m)
        handler(self.actionargs)

        sys.exit(0)

    def _build(self,args):
        """ Handler for build. args is a dict of supported key-value pairs for this action. """
        kususrc = args.get('kususrc',None)
        m = args.get('modules',None)
        kusuroot = args.get('kusuroot', None)
        
        if not m:
            modules = ['all']
        else:
            li = m.split(',')
            modules = []
            for l in li:
                mod = l.strip()
                if mod not in modules: modules.append(mod)

            
        if not kususrc:
            msg = self._('Please provide the kususrc!')
            print msg
            self.printUsageExit()
            
        if 'all' not in modules:
            # loop each of the supplied modules and check against our two lists
            # FIXME: this could be refactored using list comprehensions
            for mod in modules:
                if mod not in KUSU_MODULES and mod not in KUSU_3RDPARTY:
                    msg = self._('%(modname)s is not in the list of the Kusu modules or 3rdparty modules!' \
                        % {'modname':mod})
                    self.printMsgExit(msg)

        try:
            svnsrc = KusuSVNSource(kususrc)
            # validate kususrc
            if not svnsrc.verifySrcPath():
                msg = self._('Please provide a valid kususrc!')
                self.printMsgExit(msg)
                
            # check if kususrc is a CMAKE_BINARY_DIR
            if svnsrc.verifyCMakeBinaryDir():
                msg = self._('Detected that kususrc points to CMAKE_BINARY_DIR.')
                print msg
                msg = self._('Trying to identify a valid Kusu SVN Source..')
                print msg
                
                makefile = os.path.join(kususrc,'Makefile')
                kususrc = svnsrc.getCmakeSourceDir(makefile)
                if not kususrc:
                    msg = self._('Cannot identify a valid SVN Source! Aborting!')
                    self.printMsgExit(msg)
                    
                svnsrc = KusuSVNSource(kususrc)
                
                if not svnsrc.verifySrcPath():
                    msg = self._('Cannot identify a valid SVN Source! Aborting!')
                    self.printMsgExit(msg)

                msg = self._('Found valid Kusu SVN Source at %(kususrc)s.' % {'kususrc':kususrc})
                print msg

                
            msg = self._('Setting up build sources..')
            print msg
            svnsrc.setup()

            if 'all' in modules:
                msg = self._('Building all modules..')
                print msg        
                svnsrc.run()
            else:
                retcode = svnsrc.runCMake()
                if retcode <> 0:
                    svnsrc.cleanup()
                    raise FailedBuildCMake, "Failed CMake build for Kusu"
                
                for mod in modules:
                    msg = self._('Building %(modname)s..' % {'modname':mod})
                    print msg
                    retcode = svnsrc.runMake(mod)
                    if retcode <> 0:
                        svnsrc.cleanup()
                        raise FailedBuildMake, "Failed Make build for Kusu"
                        
            msg = self._('Cleaning up transient artefacts..')
            print msg
            svnsrc.cleanupTransient()                 


            if not kusuroot:
                msg = self._('Copying Kusu Runtime contents to current directory.')
                print msg
                svnsrc.copyKusuroot(os.getcwd())
            else:
                msg = self._('Copying Kusu Runtime contents to %(kusuroot)s.' \
                    % {'kusuroot':kusuroot})
                print msg
                svnsrc.copyKusuroot(kusuroot)
            msg = self._('Cleaning up build sources..')
            print msg
            svnsrc.cleanup()
            msg = self._('Done.')
            print msg
        except CopyError:
            svnsrc.cleanup()
            msg = self._('Error copying Kusu Runtime contents!')
            print msg
            sys.exit(2)
        except (FailedBuildCMake,FailedBuildMake):
            svnsrc.cleanup()
            msg = self._('Error building Kusu Runtime!')
            sys.exit(2)

    def _makeNiPatch(self,args):
        """ Handler for make-ni-patch. args is a dict of supported key-value pairs for this action. """
        kususrc = os.path.abspath(args['kususrc'])
        osname = args.get('os',None)
        version = args.get('version',None)
        osarch = args.get('arch',None)
        patchfile = args.get('patch',None)
        kusuroot = None
        tmproot = False
        
        if os.getuid() <> 0:
            msg = self._('Need root access!')
            self.printMsgExit(msg)
        
        if not kususrc:
            msg = self._('Please provide the kususrc!')
            print msg
            self.printUsageExit()

        if not osname:
            msg = self._('Please provide the os!')
            print msg
            self.printUsageExit()
            
        if not version:
            msg = self._('Please provide the version!')
            print msg
            self.printUsageExit()
            
        if not osarch:
            msg = self._('Please provide the arch!')
            print msg
            self.printUsageExit()

        if not patchfile:
            msg = self._('Please provide the patchfile!')
            print msg
            self.printUsageExit()
        else:
            # validate patchfile parentdir
            parentdir = os.path.join(patchfile,os.path.pardir)
            if not os.access(parentdir,os.R_OK|os.W_OK):
                msg = self._('Please ensure that the patchfile can be written into %(parentdir)s!' \
                    % {'parentdir':os.path.abspath(parentdir)})
                self.printMsgExit(msg)


        if osname not in SUPPORTED_DISTROS:
            distros = ', '.join(SUPPORTED_DISTROS)
            msg = self._('%(osname)s is not one of the supported distros. Supported distros are %(distros)s.' \
                % {'osname':osname, 'distros':distros})
            self.printMsgExit(msg)

        # we're only interested in the major version
        osver = version.split('.')[0]

        try:
            # locate boot-media-tool
            p = checkToolDeps('boot-media-tool')
            kusuroot = os.path.dirname(os.path.join(p,os.path.pardir))
        except ToolNotFound:
                # create the boot-media-tool runtime
                kusuroot = os.path.abspath(tempfile.mkdtemp(dir='/tmp',prefix='build-artefacts'))
                tmproot = True
                self._build({'kususrc':kususrc,'modules':'all','kusuroot':kusuroot})
        
        try:
            # load up b-m-t and make nodeinstaller patch
            bmt = KusuRuntime(kusuroot,'boot-media-tool')
            bmt.run('make-ni-patch',kususrc=kususrc,os=osname,version=osver,arch=osarch,patch=patchfile)
        except FailedToRun:
            if tmproot: shutil.rmtree(kusuroot)
            msg = self._('Unable to make nodeinstaller patchfile!')
            self.printMsgExit(msg)
            
        if tmproot: shutil.rmtree(kusuroot)
            


    def _list(self,args):
        """ Handler for list. args is a dict of supported key-value pairs for this action. """

        modulelist = ', '.join(KUSU_MODULES)
        msg = self._('Available Kusu modules: %(modulelist)s' % {'modulelist':modulelist})
        print msg
        thirdparty = ', '.join(KUSU_3RDPARTY)
        msg = self._('Available Kusu 3rdparty modules : %(thirdparty)s' % {'thirdparty':thirdparty})
        print msg

if __name__ == '__main__':
    app = BuildKusuArtefactsApp()
    app.run()

