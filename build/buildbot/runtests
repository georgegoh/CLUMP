#!${PYTHON_EXECUTABLE}
import commands
import unittest
import re
import platform
import sys
import glob
import os

SOURCE_PATH = "${CMAKE_SOURCE_DIR}"
DEVEL_PATH = "${CMAKE_BINARY_DIR}"
KUSU_ROOT = "${KUSU_ROOT}"
KUSU_TMP = "${KUSU_TMP}"
MODULES = '${KUSU_MODULES}'.split(';')

def findTestScripts(module):
  testscripts = []
  testdir = os.path.join(DEVEL_PATH,"src","modules",module,"src","test")
  if os.path.exists(testdir) and os.path.isdir(testdir):
    testscripts = glob.glob(testdir+"/*.py")
  return testscripts

def printModuleInfo(module):
  moduleinfo = ["Kusu Module Name: "+module]
  moduledir = os.path.join(SOURCE_PATH,"src","modules",module)
  cmd = "svn info "+moduledir
  exit_status,output = commands.getstatusoutput(cmd)
  svninfo = output.splitlines()

  print "Kusu Module Name: "+module
  print output

  return moduleinfo.append(svninfo)


def runTest(module):
  result = {'num_tests':0, 'num_pass':0, 'num_fail':0, 'num_error':0, 'num_skip':0}
  kusudevenv = os.path.join(KUSU_ROOT,"bin","kusudevenv.sh")

  if not os.path.exists(kusudevenv):
    print "Test aborted. "+kusudevenv+" not found."
    sys.exit(1)

  printModuleInfo(module)
  testscripts = findTestScripts(module)

  if len(testscripts)==0:
    print "No test found."

  for script in testscripts:
    scriptdir = os.path.dirname(script)
    scriptname  = os.path.basename(script)
    print
    print "Running "+scriptname
    cmd = "source "+kusudevenv+" && nosetests -v -w "+scriptdir+" "+scriptname
    exit_status,output = commands.getstatusoutput(cmd)
    print output
    tran = map(int,re.findall(r"Ran (\d+) tests in",output))[0]
    tpass = 0
    tfail = 0
    terror = 0
    tskip = re.findall(r"(\w+):",output).count('SKIPPED')
    if exit_status <> 0:
      (tfail) = re.search('failures',output) and map(int,re.findall(r"failures=(\d+)",output))[0] or 0
      (terror) = re.search('errors',output) and map(int,re.findall(r"errors=(\d+)",output))[0] or 0
    if tran <> 0:
      tp = tran - tfail - terror - tskip
      tpass = tp > 0 and tp or 0
    tran = tran - tskip
    print "Ran: %d, pass: %d, fail: %d, error: %d, skip: %d" % (tran,tpass,tfail,terror,tskip)
    print
    result['num_tests'] = result['num_tests'] + tran
    result['num_pass'] = result['num_pass'] + tpass
    result['num_fail'] = result['num_fail'] + tfail
    result['num_error'] = result['num_error'] + terror
    result['num_skip'] = result['num_skip'] + tskip

  exit_status = result['num_fail'] <> 0 or result['num_error'] <> 0 and 1 or 0
  return (exit_status,result)

if __name__ == "__main__":
  tresult = {'num_tests':0, 'num_pass':0, 'num_fail':0, 'num_error':0, 'num_skip':0}
  exit_code = 0
  for module in MODULES:
    exit_status,result = runTest(module)
    exit_code = exit_status <> 0 and exit_status or exit_code
    tresult['num_tests'] = tresult['num_tests'] + result['num_tests']
    tresult['num_pass'] = tresult['num_pass'] + result['num_pass']
    tresult['num_fail'] = tresult['num_fail'] + result['num_fail']
    tresult['num_error'] = tresult['num_error'] + result['num_error']
    tresult['num_skip'] = tresult['num_skip'] + result['num_skip']
  print "Test summary: Ran: %d, pass: %d, fail: %d, error: %d, skip: %d" % (tresult['num_tests'],tresult['num_pass'],tresult['num_fail'],tresult['num_error'],tresult['num_skip'])
  #print "Tests exit with code %d." % (exit_code)
  sys.exit(exit_code)

  