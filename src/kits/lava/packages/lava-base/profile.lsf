
#**********************************************************
# profile.lsf:
#    Sets the Bourne shell/Korn shell user environment 
#    for LSF commands
#
# Instructions:
#    Add this file to the end of the .profile file for all 
#    LSF users:
#    o  Copy profile.lsf into .profile for each user
#       OR
#    o  Add a line similar to the following to the end of 
#       .profile:
#       . /usr/local/lsf/conf/profile.lsf
#
# See the LSF UNIX Installation Guide for more information 
#********************************************************** 
#!/bin/sh
#--------------------------------------------------------------------------
# This code gets the binary type when setting LSF user environment.
# It is based on found_binary_type() in scripts/funcs.sh.
#---------------------------------------------------------------------------

_CUR_PATH_ENV="$PATH"
PATH=/usr/bin:/bin:/usr/local/bin:/local/bin:/sbin:/usr/sbin:/usr/ucb:/usr/sbin:/usr/bsd:${PATH}

# handle difference between system V and BSD echo
# To echo "foo" with no newline, do
# echo $enf "foo" $enl

if [ "`echo -n`" = "-n" ] ; then
    enf=
    enl="\c"
else
    enf=-n
    enl=
fi
export enf enl

 LSNULFILE=/dev/null

# Find a version of awk we can trust
AWK=""
for tmp in nawk  /usr/toolbox/nawk gawk awk 
do
#   This is the real test, for functions & tolower
#    if foo=`(echo FOO | $tmp 'function tl(str) { return tolower(str) } { print tl($1) }') 2>$LSNULFILE` \
#       && test "$foo" = "foo"
#   A simpler test, just for executability
    if ($tmp 'BEGIN{ } { }') < $LSNULFILE > $LSNULFILE 2>&1  
    then
	AWK=$tmp
        break
    fi
done

if test "$AWK" = ""
then
    echo "Cannot find a correct version of awk."
    echo "Exiting ... "
    exit 1
fi
export AWK
 
    uname_val=`uname -a`
    BINARY_TYPE="fail"
    export BINARY_TYPE
    field1=`echo $uname_val |$AWK '{print $1}'`
    case "$field1" in 

    Linux)
        version=`echo $uname_val | $AWK '{split($3, a, "."); print a[1]}'`
        if [ $version = "1" ]; then
	    BINARY_TYPE="linux"
        elif [  $version = "2" ]; then
            subver=`echo $uname_val | $AWK '{split($3, a, "."); print a[1]"."a[2]}'`
            libcver=`ls /lib/libc-* 2> /dev/null`
            libcver=`echo $libcver | $AWK '{split($1, a, "."); print a[3]}'`

            if [  $subver = "2.4" ]; then
                  BINARY_TYPE="linux2.4"

# ia64 is the family of 64-bit CPUs from Intel. We shouldn't need a new
# distribution for each processor
                  smp=`echo $uname_val | $AWK '{print $5}'`
                  if [ "$smp" = "SMP" ]; then
                        machine=`echo $uname_val | $AWK '{print $12}'`
                  else
                        machine=`echo $uname_val | $AWK '{print $11}'`
                  fi

                  if [ "$machine" = "ia64" ]; then
                     BINARY_TYPE="linux2.4-glibc2.2-ia64"
                  elif [ "$machine" = "alpha" ]; then
                     BINARY_TYPE="linux2.4-glibc2.2-alpha"
                  else
                    _libcver=`/lib/libc.so.6 | grep "GNU C Library" | $AWK '{print $7}' | $AWK -F. '{print $2}'`
                    if [ "$_libcver" = "1" ]; then
                          BINARY_TYPE="linux2.4-glibc2.1-x86"
                    else
                          BINARY_TYPE="linux2.4-glibc2.2-x86"
                    fi
                  fi
	    elif [  $subver = "2.6" ]; then
		# Only have one type for now
                BINARY_TYPE="linux2.6-glibc2.3-x86"
            fi      
        fi
         ;;
    *)
        # Unknown Machine type
	echo "Unsupported machine type: $field1"
	BINARY_TYPE="fail"
	;;
    esac
    if [ $BINARY_TYPE = "fail" ]; then
        echo "Cannot get $BINARY_TYPE."
     fi

LSF_VERSION=1.0
LSF_TOP=/opt/lava
if [ "$BINARY_TYPE" != "trix6" -a "$BINARY_TYPE" != "trix6.5.8" ]; then 
   LSF_SERVERDIR=$LSF_TOP/$LSF_VERSION/$BINARY_TYPE/etc
   LSF_BINDIR=$LSF_TOP/$LSF_VERSION/$BINARY_TYPE/bin
else
   . $LSF_TOP/conf/lsf.conf
    LSF_BINDIR=$LSF_LINK_PATH/bin
    LSF_SERVERDIR=$LSF_LINK_PATH/etc
fi
LSF_LIBDIR=$LSF_TOP/$LSF_VERSION/$BINARY_TYPE/lib
ldpath=`printenv LD_LIBRARY_PATH`
if [ "$ldpath" = "" ] ; then
    LD_LIBRARY_PATH=$LSF_TOP/$LSF_VERSION/$BINARY_TYPE/lib
else
    LD_LIBRARY_PATH=$LSF_TOP/$LSF_VERSION/$BINARY_TYPE/lib:$ldpath
fi
XLSF_UIDDIR=$LSF_TOP/$LSF_VERSION/$BINARY_TYPE/lib/uid
LSF_ENVDIR=$LSF_TOP/conf
PATH=$LSF_BINDIR:$LSF_SERVERDIR:$_CUR_PATH_ENV
if [ -z "$MANPATH" ] ; then
        MANPATH=/opt/lava/1.0/man:
else
    MANPATH=/opt/lava/1.0/man:$MANPATH 
fi
unset LSF_TOP LSF_VERSION BINARY_TYPE enf enl
export LSF_SERVERDIR LSF_BINDIR LSF_LIBDIR XLSF_UIDDIR LSF_ENVDIR PATH MANPATH
