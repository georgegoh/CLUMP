#!/usr/bin/env python
#
# $Id:$

from kusu.core.database import DB 
from primitive.system.software.dispatcher import Dispatcher
from primitive.system.software.probe import OS

from Cheetah.Template import Template
from path import path

import tempfile
import os
import sys
import optparse

try:
    import subprocess
except:
    from popen5 import subprocess


def run(repoid):
    dbdriver = os.getenv('KUSU_DB_ENGINE')
    if not dbdriver or dbdriver not in ['mysql','postgres']:
        dbdriver = 'postgres'

    dbdatabase = 'kusudb'
    dbuser = 'apache'
    dbpassword = None
    db = DB(dbdriver, dbdatabase, dbuser, dbpassword)

    tmpdir = path(tempfile.mkdtemp())
    yumconf = path(tempfile.mkdtemp()) / 'buildinitrd.repo'

    kusu_root = path(os.getenv('KUSU_ROOT', '/opt/kusu'))

    template = kusu_root / \
               'etc' / \
               'templates' / \
               'mkinitrd-templates.tmpl'

    repo = db.Repos.select_by(repoid=repoid)[0]
    os_name = repo.os.name
    os_arch = repo.os.arch
        
    makedev = Dispatcher.get('makedev')
    if OS()[0].lower() in ['sles', 'opensuse', 'suse']:
        makedev = "cd %s/dev && %s"  % (tmpdir, makedev)
        
    row = db.AppGlobals.select_by(kname = 'DEPOT_REPOS_ROOT')
    if row: repos_root = path(row[0].kvalue)

    if os_name == 'rhel':
        repo_path = repos_root / str(repo.repoid) / 'Server'
    elif os_name == 'centos':
        repo_path = repos_root / str(repo.repoid) 

    conf = """[buildinitrd]
name=initrd
baseurl=file://%s
enabled=1
gpgcheck=0""" % repo_path

    f = open(yumconf, 'w')
    f.write(conf)
    f.close()

    t =  Template(file=str(template), 
                  searchList=[{'MAKEDEV': makedev, 
                               'yumconf': yumconf, 'FAKEROOT':tmpdir, 'ARCH': os_arch}])
    fd, tmpfile = tempfile.mkstemp()
    tmpfile = path(tmpfile)
    os.write(fd, str(t))
    os.close(fd)
    tmpfile.chmod(0755)

    p = subprocess.Popen(tmpfile,
                         cwd = tmpdir,
                         shell=True)
    out, err = p.communicate()
    retcode = p.returncode

    if yumconf.parent.exists():
        yumconf.parent.rmtree()

    if tmpdir.exists():
        tmpdir.rmtree()

    if tmpfile.exists():
        tmpfile.remove()

    sys.exit(retcode)

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option('-r', '--repo', dest='repoid', help="Specify the repoid.")
    options, args = parser.parse_args()
 
    if not options.repoid:
        print 'Please specify the repoid!'
        sys.exit(-1)

    run(options.repoid) 
