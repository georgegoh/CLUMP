#!/usr/bin/python
# $Id$

# Module --------------------------------------------------------------------
# COPYRIGHT NOTICE
#   Copyright (c) 2002 Scali AS. All Rights Reserved.
#
#   This is unpublished proprietary source code of Scali AS and may be
#   subject to change without further notice. The copyright notice above does
#   not evidence any actual or intended publication of such source code.
#
#   This document is submitted to recipient in confidence.
#   Information contained herein may not be used, copied or disclosed
#   in whole or in part except as permitted by a written agreement between
#   recipient and Scali AS.
#
# CREATED
#   Author: Pramod Dahale
#   Date:   2007/10/05
#
# LAST CHANGED
#   $Author: $
#   $Date: $
# ---------------------------------------------------------------------------

BASEDIR = "/opt/kusu"

import sys
sys.path.append(BASEDIR + "/lib/python%s/site-packages" % sys.version[:3])
# Fixme: scapower is not available
import scapower
# Fixme: scautil is not available
import scautil
# Fixme: scacim is not available
import scacim
# Fixme: scacimutil is not available
import scacimutil
# Fixme: scabracket is not available
import scabracket
# Fixme: scaerror is not available
import scaerror
import logging
from optparse import OptionParser

DEFAULT_PLUGIN_PATH = BASEDIR + "/lib/python%s/site-packages/powerplugins/" % sys.version[:3]
DEFAULT_CONFIG_FILE = BASEDIR + "/etc/scapower.conf"

class Parameters:
    """
    Class that defines the parameters for the command
    """
    def __init__(self):
        """ Initialize the parameters passed as command option
        """
        self.usage = "Usage: scavmpowerconf <nodename> <hostmachineip> <hostmachineusername> <hostmachinepassword> <vmwarename> \n\n \
                     <nodename>: nodename of the virtual machine\n \
                     <hostmachineip>: IP of machine that hosts the VM \n \
                     <hostmachineusername>: User Name of machine that hosts the VM \n \
                     <hostmachinepassword>: Password of machine that hosts the VM \n \
                     <vmwarename>: VMware machine name by which hostmachine identifies VM \n \
                     (This name should not have spaces e.g. RedHatEnterpriseLinux4.vmx) \n"
        parser = OptionParser(usage=self.usage)
        parser.add_option("-c", "--config_file", action="store", type="string",
                          dest= "conf_file", default=DEFAULT_CONFIG_FILE,
                          help="Define config-file")
        parser.add_option("-v", "--verbose", action="store_true", dest= "verbose", default=False,
                          help="Verbose run; display more information")
        (self.opts, self.args) = parser.parse_args(sys.argv[1:])

def main(params):
    """ This is the main function verifies command given and update the file,
    command has arguments: nodename, hostmachineip, username, password, VMwareName
    """
    failed = False
    if len(params.args) < 5:
        print params.usage
        sys.exit(1)

    connection = scacim.DatabaseConnection()
    nodenames = params.args[0]
    nodes = scacimutil.findSystems(connection, nodenames)
    hostmcname = params.args[1]
    hostusername = params.args[2]
    hostuserpasswd = params.args[3]
    vmmachinenames = params.args[4]
    vmnames = scabracket.scaBracketExpand(vmmachinenames)

    if not (len(nodes) == len(vmnames)):
        raise scaerror.ScaError("Number of nodenames(%d) must match number of vmmachinenames(%d)" %
            (len(nodes),  len(vmnames)))

    if params.opts.verbose:
        log.setLevel(logging.ERROR)

    pairs = zip(nodes,vmnames)
    for (nodename, vmmachinename) in pairs:
        if vmmachinename.find(".vmx") == -1:
                failed = True
                log.error("VM machine:%s don't have extention as .vmx"%vmmachinename)
                print "VM machine:%s don't have extention as .vmx"%vmmachinename
        try:
            conffile = file(DEFAULT_CONFIG_FILE,'a+')
            lines = conffile.readlines()
            # check for existance of node in configuration file
            newlines = []
            linenumber = 1
            vmdevicefound = False
            for line in lines:
                if line.find('device') != -1 and line.find('VM') != -1:
                    vmdevicefound = True
                if line.find(nodename.elementname) != -1:
                    continue
                else:
                    newlines.append(line)
            conffile.writelines(newlines)
            if not vmdevicefound :
                lines = ["device\tVM\tvmpower\t",
                         "\n"]
                conffile.writelines(lines)
            # Add line to the end for the node
            lines = ["node\t" + nodename.elementname + "\tVM\t" + hostmcname + " " + hostusername + " " + hostuserpasswd + " " + vmmachinename,
                     "\n"]
            conffile.writelines(lines)
        finally :
            conffile.close()
    if failed:
        log.error("Unable to execute command for VM, check configuration file %s" % DEFAULT_CONFIG_FILE)
        sys.exit(-1)

if __name__ == '__main__':
    """
    This is the main function gets called as we run the command for inserting inputs
    in "scpower.conf" configuration file
    """
    log = scautil.defaultLogging()
    log.setLevel(logging.FATAL)
    main(Parameters())
