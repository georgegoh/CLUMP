#!/bin/sh
# $Id$
#
# COPYRIGHT NOTICE
#
# © 2008 Platform Computing. All Rights Reserved.
# All other trademarks are the property of their respective
# holders.

off_output=/tmp/off_output_$$
on_output=/tmp/on_output_$$
cycle_output=/tmp/cycle_output_$$
status_output=/tmp/status_output_$$
status_output_old=/tmp/status_output_old_$$
hosts="$1"
RMFILES="$off_output $on_output $cycle_output $status_output_old"


RETVAL=0

usage() {
    printf "\nTest scapowd daemon \n\n"
    printf "Usage: $PROGNAME  [-h?]  <nodelist>"
    printf "    -h                : Print this text."
    printf "The testprogram will turn nodes in nodelist on,off or cycle them"
    printf "with a random interval between 0 and 9 seconds. Then the state reported"
    printf "is checked to be in accordance with the performed action. I.e all nodes should"
    printf "be reported off after nodes are turned off."
}


choose_command() {
   #$1 indicate program
   case $1 in
       0) echo 'on';;
       1) echo 'off';;
       2) echo 'cycle';;
       3) echo 'status';;
       *)
   esac
}


xit(){
    echo "So long, (and thanks for all the fish :-)"
    rm -rf $RMFILES
    exit $RETVAL
}

xit2(){
 RETVAL=130
 exit 
}

xit3(){
 RETVAL=131
 exit
}

xit15(){
 RETVAL=143
 exit
}

trap xit  0
trap xit2 2
trap xit3 3
trap xit15 15




while getopts :\?h SWITCH; do
    case $SWITCH in
	h) usage; exit 0;;
        \?) usage; exit 2;;
    esac
done


if  ! rpm -q ScaPowd > /dev/null ; then
    echo "Error: ScaPowd must be installed."
    RETVAL=`false`
    exit 
fi  

USERID=`id | cut -d\= -f2 | cut -d\( -f1`
if [ ! $USERID -eq 0 ]; then
     echo "ERROR: You have to have root permissions to run this program, exiting..." 1>&2
     exit `false`
fi


echo " *  Turning all nodes off and sampling output."
/opt/kusu/sbin/power  "$hosts" off
sleep 1
/opt/kusu/sbin/power  "$hosts" status > $off_output
sleep 1
echo " *  Turning all nodes on, and sampling output"
/opt/kusu/sbin/power  "$hosts" on
sleep 1
/opt/kusu/sbin/power  "$hosts" status > $on_output
sleep 1
echo " *  Cycling all nodes, and sampling output"
/opt/kusu/sbin/power  "$hosts" cycle 
sleep 1
/opt/kusu/sbin/power  "$hosts" status > $cycle_output
sleep 1





#echo "/opt/kusu/sbin/power  "$hosts" status > $status_output"
/opt/kusu/sbin/power  "$hosts" status > $status_output


while  true; do
#   choose random operation
    CHOISE=`expr $RANDOM % 4`

    OPERATION=`choose_command $CHOISE`
    #echo "/opt/kusu/sbin/power  "$hosts" $OPERATION"
    /opt/kusu/sbin/power  "$hosts" $OPERATION
    mv $status_output $status_output_old
    sleep 1
    #echo "/opt/kusu/sbin/power  "$hosts" status > $status_output"
    /opt/kusu/sbin/power  "$hosts" status > $status_output
    

    if [ "$OPERATION" = "off" ]; then
	if diff $off_output $status_output; then
	    echo "Off-test successfull,status is now:"
	    cat $status_output
	else
	    echo "ERROR! Off-test failed $off_output differs from "$status_output
	    exit 1
	fi
    elif [ "$OPERATION" = "on" ]; then
	if diff $status_output $on_output; then
	    echo "On-test successfull,status is now:"
	    cat $status_output
	else
	    echo "ERROR! On-test failed"
	    exit 1
	fi
    elif [ "$OPERATION" = "cycle" ]; then
	if diff $status_output $cycle_output; then
	    echo "Cycle-test successfull,status is now:"
	    cat $status_output
	else
	    echo "ERROR! Cycle-test failed, $status_output differs from $cycle_output"
	    exit 1
	fi
    elif [ "$OPERATION" = "status" ]; then
	if diff $status_output_old $status_output; then
	    echo "Cycle-test successfull, status is now:"
            cat $status_output
	else
	    echo "ERROR! Status-test failed $status_output_old differs from $status_output"
	    exit 1
	fi

    fi
    dt=`expr $RANDOM % 10`
    echo "Waiting " $dt " seconds"
    sleep $dt
done