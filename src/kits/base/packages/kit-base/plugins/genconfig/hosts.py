# $Id$
#
#   Copyright 2007 Platform Computing Inc
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
#
#
#  THIS IS TH REAL ONE


from kusu.genconfig import Report
from kusu.util.verify import verifyIP, verifyFQDN
from kusu.util.tools import getClusterHostNames
from kusu.ipfun import onNetwork
import sys
import os

class thisReport(Report):

    def toolHelp(self):
        print self.gettext("genconfig_Hosts_Help")


    def runPlugin(self, pluginargs):
        print "# "
        print "# Dynamically generated by: genconfig  (Do not edit!)" 
        print "#"
        print "%-15s localhost.localdomain\tlocalhost" % '127.0.0.1'

        _ = self.gettext

        # Dictionary nodesDict is used for storing information for 
        # all nodes (including managed, unmanaged and external) with
        # the structure of (e.g):
        #                    ( IP )            ( Node Names )
        #     nodesDict['111.111.111.111'] = ['name1', 'name2']
        nodesDict = {}

        # Get the DNS Zone served by the Installer
        dnszone = self.db.getAppglobals('DNSZone')
        if not dnszone:
            # Create the external hosts entries
            sys.stderr.write(_("genconfig_cannot_determine_DNS_zone\n"))
            sys.exit(0)

        if not int(self.db.getAppglobals('InstallerServeDNS')):
            self._importExternalHosts(nodesDict, dnszone)
            return

        nodesDict = getClusterHostNames(self.db)
        # Create the external hosts entries
        self._importExternalHosts(nodesDict, dnszone)

    def _importExternalHosts(self, nodesDict, privateZone):
        """
        Import external hosts information from /etc/hosts.append file.
        """
        # Read in all the information from /etc/hosts.append file.
        nodesInfo = self._getHostsAppendData()

        if not nodesInfo:
            return

        ignoreLines = []
        printLines = []

        # Get IPs reserved by managed and unmanaged nodes
        pcmNodeIPs = nodesDict.keys()

        for line in nodesInfo:

            # Print comments in /etc/hosts.append file
            if not line or line.startswith("#"):
                printLines.append(line)
                continue

            # Handle comments in the middle of the line in /etc/hosts.append file
            comment = ""
            if "#" in line:
                info, comment = line.split("#", 1)
                comment = comment.strip()
                info = info.strip()

            validNodeInfo = True

            if comment:
                node = info.split()
            else:
                node = line.split()

            # Ignore incomplete information
            if len(node) < 2:
                ignoreLines.append(line)
                continue

            # 1. Validate IP
            ip = node.pop(0)
            if not self._isValidIP(ip, pcmNodeIPs):
                ignoreLines.append(line)
                continue

            printLine = "%-15s" % ip

            # 2. Validate each node name for the current IP
            for nodeName in node:
                valid = self._isValidNodeName(ip, nodeName, privateZone, nodesDict)
                if not valid:
                    validNodeInfo = False
                    ignoreLines.append(line)
                    break

                printLine += "\t%s" % nodeName

            # Record the external node information into nodesDict
            if validNodeInfo:
                if comment:
                    printLine += "\t# %s" % comment
                printLines.append(printLine)
                if ip not in nodesDict.keys():
                    nodesDict[ip] = [nodeName]
                else:
                    nodesDict[ip].append(nodeName)

        # Print external nodes entries
        if printLines:
            print "\n# External Nodes"
            for printLine in printLines:
                print printLine

        # Invalid nodes information will be printed as commented
        if ignoreLines:
            print "\n# The following entries are invalid and have been ignored:"
            for ignoreLine in ignoreLines:
                print "#", ignoreLine


    def _isValidIP(self, ip, pcmNodeIPs):
        """
        Validate IP address
        """
        validIP = True
        # 1. Verify if the IP is a valid IPv4 address
        validIP, msg = verifyIP(ip)

        if not validIP:
            return False

        # 2. Verify if the IP is in use
        if ip in pcmNodeIPs:
            return False

        # 3. Verify if the IP is in PCM network
        query = ('SELECT network, subnet '
                 'FROM networks WHERE type = "provision" '
                 'AND usingdhcp=False')
        try:
            self.db.execute(query)
        except:
            sys.stderr.write(self.gettext("DB_Query_Error\n"))
            sys.exit(-1)
        else:
            data = self.db.fetchall()
            if data:
                for row in data:
                    network, subnet = row
                    if onNetwork(network, subnet, ip):
                        validIP = False
                        break

        return validIP


    def _isValidNodeName(self, ip, nodeName, privateZone, nodesDict):
        """
        Validate node name
        """
        validNodeName = True
        # 1. Verify if node name is valid
        validNodeName, msg = verifyFQDN(nodeName)

        if not validNodeName:
            return False

        # 2. Verify the dns zone
        if validNodeName and "." in nodeName:
            dnsZone = nodeName.split(".", 1)[1]
            validNodeName, msg = verifyFQDN(dnsZone)
            if not validNodeName or dnsZone == privateZone:
                return False

        # 3. Verify if the hostname is in use
        for key in nodesDict.keys():
            if nodeName in nodesDict[key] and key != ip:
                # The node name is reserved by other IP,
                # then node name is not allowed to be used
                # by the current IP
                validNodeName = False
                break

        return validNodeName


    def _getHostsAppendData(self):
        """
        Read uncommented data from /etc/hosts.append file.
        """
        filename = "/etc/hosts.append"
        if not os.path.exists(filename):
            return None

        fp = file(filename, 'r')

        nodeInfo = []
        while True:
            try:
                line = fp.next().strip()
            except StopIteration:
                break
            else:
                nodeInfo.append(line)
        fp.close()
        return nodeInfo

