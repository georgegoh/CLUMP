#!/usr/bin/env python
# $Id: kusurc.py 1436 2007-06-19 11:56:44Z ltsai $
#
# Copyright 2007 Platform Computing Inc.
#
# Licensed under GPL version 2; See LICENSE file for details.
#

from kusu.core import database as db
from path import path
import os
import re
import sys
import pwd

try:
    import subprocess
except:
    from popen5 import subprocess

class App:

    def __init__(self):
        self.os_name = os.environ.get('KUSU_DIST', None)
        self.os_version = os.environ.get('KUSU_DISTVER', None)
        self.os_arch = os.environ.get('KUSU_DIST_ARCH', None)
        
    def run(self):
        self.migrateDB()
        self.makeRepos()
        self.enableSyslog()
        self.restrictDHCPDToProvisionNet()
        self.generateSSHKey()
        self.setDBPassword()

    def setDBPassword(self):
        apache = pwd.getpwnam('apache')
        uid = apache[2]
        gid = apache[3]

        p = path('/opt/kusu/etc/db.passwd')
        p.chmod(0400)
        p.chown(uid, gid)

    def migrateDB(self):
        """Set up MySQL connection and SQLite collection, then migrate."""
             
        if path('/root/kusu.db').exists():
            self.sqliteDB = db.DB('sqlite', '/root/kusu.db')
            self.db = db.DB('mysql', 'kusudb', 'root', entity_name='alt')

            self.sqliteDB.copyTo(self.db)
            os.unlink('/root/kusu.db')

        # FIXME: Work around for SA syntax problem
        import sqlalchemy as sa

        for key in sa.orm.mapper_registry.keys():
            sa.orm.mapper_registry.pop(key)
        self.db = db.DB('mysql', 'kusudb', 'root')

    def makeRepos(self):
        """Makes the repoistory for compute and installer nodes."""

        from kusu.repoman.repofactory import RepoFactory

        rfactory = RepoFactory(self.db)
        longname = '%s-%s-%s' % (self.os_name, self.os_version, self.os_arch)

        try:
            ngname = 'compute' + '-' + longname
            rfactory.make(ngname, 'Repo for ' + ngname)
        except: pass

        try:
            ngname = 'compute-diskless' 
            rfactory.make(ngname, 'Repo for ' + ngname)
        except: pass
        
        try:
            ngname = 'compute-imaged' 
            rfactory.make(ngname, 'Repo for ' + ngname)
        except: pass
        
    def enableSyslog(self):
        """Enable remote syslog logging"""
        
        f = open('/etc/sysconfig/syslog', 'r')
        syslog = f.read()
        f.close()

        line = 'SYSLOGD_OPTIONS="-m 0"'
        index = syslog.find(line)
        
        f = open('/etc/sysconfig/syslog', 'w')
        f.write(syslog[:index] + 'SYSLOGD_OPTIONS="-m 0 -r"' + syslog[index+len(line):])
        f.close()

        p = subprocess.Popen('/etc/init.d/syslog restart',
                             shell=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
        out, err = p.communicate()
        retcode = p.returncode

    def restrictDHCPDToProvisionNet(self):
        myname = \
            self.db.AppGlobals.selectfirst_by(kname='PrimaryInstaller').kvalue
        nics = self.db.Nodes.selectfirst_by(name=myname).nics

        dhcpdnics = []
        for nic in nics:
            if nic.network.type == 'provision':
                dhcpdnics.append(nic.network.device)

        if dhcpdnics:
            f = open('/etc/sysconfig/dhcpd', 'r')
            dhcpd = f.read()
            f.close()

            line = 'DHCPDARGS='
            index = dhcpd.find(line)

            f = open('/etc/sysconfig/dhcpd', 'w')
            f.write(dhcpd[:index] + 'DHCPDARGS=%s' % ' '.join(dhcpdnics) + \
                    dhcpd[index + len(line):])
            f.close()

            p = subprocess.Popen('/etc/init.d/dhcpd restart',
                                 shell=True,
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)
            out, err = p.communicate()
            retcode = p.returncode

    def generateSSHKey(self):
        sshdir = path('/root/.ssh')

        if not sshdir.exists():
            sshdir.makedirs()

        sshdir.chmod(0700)

        # RSA key, 2048 bits in size, /root/.ssh/id_rsa, no passphrase
        cmds = ['ssh-keygen', '-t', 'rsa', '-b', '2048',
                '-f', sshdir / 'id_rsa', '-N', '']
        sshP = subprocess.Popen(cmds, stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        out, err = sshP.communicate()

        # place our public key in web root
        webdir = path('/var/www/html')

        if not webdir.exists():
            webdir.makedirs()

        # copy public key to webdir
        (sshdir / 'id_rsa.pub').copy(webdir / 'public_keys')
        
if __name__ == "__main__":
    app = App()
    app.run()

    # delete myself once I'm finished
    os.remove(sys.argv[0])
