#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# $Id$
#
# Copyright (C) 2010 Platform Computing Inc.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of version 2 of the GNU General Public License as published by the
# Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA

import sys
import os
from kusu.core.app import KusuApp
from optparse import OptionParser
from kusu.migrate.migrate import KusuMigrate

KUSU_MIGRATE_EXPORT = 'export'
KUSU_MIGRATE_IMPORT = 'import'
KUSU_MIGRATE_REPORT = 'report'
KUSU_MIGRATE_REPORT_TAR = 'report_tar'

class KusuMigrateApp(KusuApp):


    def __init__(self, kminst):

        KusuApp.__init__(self)
        # We only want one instance of kusu-migrate running at any one time.
        self.kminst = kminst
        self.force_single_instance()
        self.parser = OptionParser('kusu-migrate - PCM migration tool')

        def mutexAction(option, opt_str, value, parser):
            if parser.values.action is not None:
                self.printHelp()
                sys.exit(1)
            elif '-e' in option._short_opts:
                setattr(parser.values, option.dest, 'export')
            elif '-i' in option._short_opts:
                setattr(parser.values, option.dest, 'import')
            elif '-r' in option._short_opts:
                setattr(parser.values, option.dest, 'report')
       
        self.parser.add_option('-v', '--version', dest='version',
                               help=self._('Display version'),
                               action='store_true', default=False) 
        self.parser.add_option('-e', '--export', dest='action',
                               help=self._('Capture PCM customisation and '\
                                           'settings and export to a tar file'),
                               action='callback', callback=mutexAction)
        self.parser.add_option('-i', '--import', dest='action',
                               help=self._('Import customisation and settings '\
                                           'in a tar file into PCM'),
                               action='callback', callback=mutexAction)
        self.parser.add_option('-r', '--report', dest='action',
                               help=self._('print the report of current PCM 1.2 '\
                                           'cluster or the report in the tar '\
                                           'file if it is provided.'),
                               action='callback', callback=mutexAction)
        self.parser.add_option('-t', '--tgzfile', dest='tgzfile',
                               help=self._('tar-gzipped file of PCM settings'))

    def parseArgs(self):
        (options, args) = self.parser.parse_args()

        if args:
            sys.stderr.write("Error: unclaimed arguments: %s, "\
                             "consider using -t option for %s\n\n" % (args, args))
            self.printHelp()
            sys.exit(1)
        if options.version:
            print "kusu-migrate version %s" % self.version
            sys.exit(0)
        if not options.action:
            self.printHelp()
            sys.exit(1)
        if options.action == KUSU_MIGRATE_EXPORT:
            self.tgzfile = options.tgzfile
            self.action = KUSU_MIGRATE_EXPORT
        elif options.action == KUSU_MIGRATE_IMPORT:
            if not options.tgzfile:
                self.kminst._exit_if_no_tgzfile_specified()
            self.kminst._exit_on_invalid_tgzfile_format(options.tgzfile)
            self.tgzfile = options.tgzfile
            self.action = KUSU_MIGRATE_IMPORT
        elif options.action == KUSU_MIGRATE_REPORT:
            self.action = KUSU_MIGRATE_REPORT
            if options.tgzfile is not None:
                self.kminst._exit_on_invalid_tgzfile_format(options.tgzfile)
                self.tgzfile = options.tgzfile
                self.action = KUSU_MIGRATE_REPORT_TAR

    def printHelp(self):
        self.parser.print_help()

    def run(self):
        '''The main body of the application.  '''
        self.parseArgs()
        if self.action == KUSU_MIGRATE_EXPORT:
            self.kminst.doExportAction(self.tgzfile)
        elif self.action == KUSU_MIGRATE_IMPORT:
            self.kminst.doImportAction(self.tgzfile)
        elif self.action == KUSU_MIGRATE_REPORT:
            self.kminst.printGeneratedReport()
        elif self.action == KUSU_MIGRATE_REPORT_TAR:          
            self.kminst.printReportFile(self.tgzfile)

if __name__ == '__main__':

    if os.getuid() != 0:
        sys.stderr.write('Only root user can run kusu-migrate.\n')
        sys.exit(1)
    kminst = KusuMigrate()
    app = KusuMigrateApp(kminst)
    app.run()
