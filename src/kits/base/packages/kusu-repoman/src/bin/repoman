#!/usr/bin/env python
#
# $Id: repo.py 1732 2007-07-26 06:21:43Z ltsai $
#
# Copyright 2007 Platform Computing Inc.
#
# Licensed under GPL version 2; See LICENSE file for details.
#

from kusu.util.errors import *
from kusu.core import database as db
from kusu.core.app import KusuApp
from kusu.kitops.kitops import *
from kusu.repoman import repofactory
from kusu.repoman import tools as repotools
from kusu.util import tools
import kusu.util.log as kusulog

from path import path
import os
import time
import sys
import stat
import atexit
import re
from optparse import SUPPRESS_HELP, OptionParser

try:
    import subprocess
except:
    from popen5 import subprocess

REPOMAN_NONE = 0x00
REPOMAN_NEW = 0x01
REPOMAN_SNAPSHOT = 0x02
REPOMAN_LIST = 0x04
REPOMAN_DELKIT = 0x08
REPOMAN_DELREPO = 0x10
REPOMAN_ADDKIT = 0x20
REPOMAN_UPDATE = 0x40


class RepoManApp(KusuApp):
    """ Application class for repoman. """

    prefix = None
 
    def __init__(self):
        """ App-specific initialization. """
        KusuApp.__init__(self)
        
        self.action = REPOMAN_NONE

        usage = """repoman [-h | --help]
               [-v | --version]
               [-l |  --list]
               [-s | --snapshot]
               [-u | --update]
               [--dbdriver]
               [--dbdatabase]
               [--dbuser]
               [--dbpassword]
               [-n | --new] [-r reponame | --reponame reponame]
               [-a | --add] [-k | --kit <name> [-o <version> | --kitversion <version>] [ -c <arch> | --kitarch <arch>]]
               [-a | --add] [-i | --kid <kid>]
               [-e | --delete] [--kit <name> [-o <version> | --kitversion <version> ] [-c <arch> | --kitarch <arch>]]
               [-e | --delete] [-i | --kid <kid>]
               [-e | --delete] [-r reponame | --reponame reponame]
               [--flush-cache] [-r reponame | --reponame reponame]

For examples:
    repoman -n -r "Example repo"
    repoman -e -r "Example repo"

    repoman -r "Example repo" -a --kit fedora
    repoman -r "Example repo" -a --kit fedora --kitversion 6 --kitarch i386

    repoman -r "Example repo" -e --kit fedora
    repoman -r "Example repo" -e --kit fedora --kitversion 6 --kitarch i386
"""
        usage = self._(usage)
        self.parser = OptionParser(usage)

        # setup command line parser
        self.parser.add_option('-n', '--new', dest='new', action="store_true", help=self._('creates a new repo'))
        self.parser.add_option('-r', '--reponame', dest='reponame', help=self._('repo name'))
        self.parser.add_option('-i', '--kid', dest='kid', help=self._('kit id'))
        self.parser.add_option('-k', '--kit', dest='kit', help=self._('kit name'))
        self.parser.add_option('-o', '--kitversion', dest='kitversion', help=self._('kit version'))
        self.parser.add_option('-c', '--kitarch', dest='kitarch', help=self._('kit arch'))
        self.parser.add_option('-a', '--add', dest='add', action="store_true", help=self._('add kit'))
        self.parser.add_option('-u', '--update', dest='update', action="store_true", help=self._('update repo'))
        self.parser.add_option('-l', '--list', dest='list', action="store_true", help=self._('list repos'))
        self.parser.add_option('-e', '--delete', dest='delete', action="store_true", help=self._('delete kit/repo'))
        self.parser.add_option('-s', '--snapshot', dest='snapshot', action="store_true", help=self._('snapshot repo'))
        self.parser.add_option('-p', '--prefix', dest='prefix', help=SUPPRESS_HELP)
        self.parser.add_option('-v', '--version', dest='version', action="store_true", help=self._('Display version of tool'))
        self.parser.add_option('--dbdriver', dest='dbdriver',
                               help=self._('Database driver (sqlite, mysql,postgres)'))
        self.parser.add_option('--dbdatabase', dest='dbdatabase',
                               help=self._('Database'))
        self.parser.add_option('--dbuser', dest='dbuser',
                               help=self._('Database username'))
        self.parser.add_option('--dbpassword', dest='dbpassword',
                               help=self._('Database password'))
        self.parser.add_option('--flush-cache', dest='flush_cache', action="store_true",
                               help=self._('flush repository cache'))

    def getVersion(self):
        self.stdoutMessage('Repoman 1.2\n')

    def new(self, repo_name):
        li = re.compile("^[a-zA-Z0-9-_.]+").findall(repo_name)
        if not li or (len(li[0]) != len(repo_name)):
            self.stderrMessage('Invalid repo name. Repo name can only contain a-z, A-Z, 0-9, _-.\n')
            self.unlock()
            sys.exit(1)
        
        self.logEvent("Creating new repository: %s" % repo_name, toStdout=False)

        repo = self.dbs.Repos.select_by(reponame=repo_name)

        if repo:
            self.logErrorEvent('Repo: %s exists.' % repo_name)
            self.unlock()
            sys.exit(1)
        
        repo = self.dbs.Repos()
        repo.reponame = repo_name

        row = self.dbs.AppGlobals.select_by(kname = 'PrimaryInstaller')[0]
        masterNode = self.dbs.Nodes.select_by(name=row.kvalue)[0]
        repo.installers = ';'.join([nic.ip for nic in masterNode.nics if nic.ip])
        
        repo.save()
        repo.flush()

        location = path('/' + self.repos_root + '/%s' % repo.repoid)
        path(path(self.prefix or '/') / self.repos_root / str(repo.repoid)).makedirs()
        repo.repository = str(location)
        
        repo.save()
        repo.flush()

        self.logEvent("Finished creating new repository: %s" % repo_name, toStdout=False)
        self.stdoutMessage('Repo: %s created. You can now add kits, including OS kits to the new repo.\n', repo_name)

    def addKit(self, repo_name, kid, kname, kversion, karch):

        self.logEvent("Adding Kit %s-%s-%s to Repo: %s" % (kname,kversion,karch,repo_name), toStdout=False)

        self.repoExists(repo_name)

        kits = self.dbs.Kits.select_by(kid = kid, rname = kname, version=kversion, arch=karch)

        if kits:
            kit = kits[0]

            if len(kits) > 1:
                self.logErrorEvent('There is more than 1 kit.')
                self.unlock()
                sys.exit(1)

            else:
                repo = self.dbs.Repos.select_by(reponame = repo_name)[0]

                if kit.isOS:
                    if True in [k.isOS for k in repo.kits]:
                        self.logErrorEvent('An OS kit has been already added.')
                        self.unlock()
                        sys.exit(1)
                        
                if kit in repo.kits:
                    self.logErrorEvent('Kit %s has been added already.' % kname)
                    self.unlock()
                    sys.exit(1)

                else:
                    if kit.isOS:
                        repo.ostype = '%s-%s-%s' % (kname,kversion,karch)

                    else:
                        # validate kit
                        # At least 1 component must be valid for the repo os type
                        if not kit.getMatchingComponents(repo.os):
                            self.logErrorEvent('Kit is not compatible with repo: %s\n' % repo_name)
                            self.stderrMessage('Kit is not compatible with repo: %s\n' % repo_name)
                            self.unlock()
                            sys.exit(1)
        
                    repo.kits.append(kit)
                    repo.save()
                    repo.flush()

                    self.logEvent("Finished adding Kit %s-%s-%s to Repo: %s" % (kname,kversion,karch,repo_name), toStdout=False)
                    self.stdoutMessage('Kit: %s, version %s, architecture %s, has been added to repo: %s.  Remember to refresh with -u\n', kname,kversion,karch,repo_name)
        else:
            self.logErrorEvent('No such kit. Please specify kit name, version and arch.')
            self.unlock()
            sys.exit(1)

    def delKit(self, repo_name, kid, kname, kversion, karch):
        
        self.logEvent("Deleting Kit %s-%s-%s from Repo: %s" % (kname,kversion,karch,repo_name), toStdout=False)
        
        self.repoExists(repo_name)

        kits = self.dbs.Kits.select_by(kid = kid, rname = kname, version=kversion, arch=karch)

        if kits:
            kit = kits[0]

            if len(kits) > 1:
                self.logErrorEvent('More than 1 kit is available.')
                self.unlock()
                sys.exit(1)
            else:
                repo = self.dbs.Repos.select_by(reponame = repo_name)[0]

                if not kit in repo.kits:
                    self.logErrorEvent('No such kit in repo: %s' % repo_name)
                    self.unlock()
                    sys.exit(1)
                else:
                    ngs = self.dbs.NodeGroups.select_by(repoid = repo.repoid)

                    ngInUse = []
                    for ng in ngs:
                        if kit in repotools.getKits(self.dbs, ng.ngname):
                            ngInUse.append(ng.ngname)
                            
                    if ngInUse:
                        self.logErrorEvent('Kit: %s-%s-%s in use by nodegroup(s): %s' % (kname,kversion,karch, ', '.join(ngInUse)) )
                        self.unlock()
                        sys.exit(1)

                    repo.kits.remove(kit)
                    
                    noOS = True
                    for kit in repo.kits:
                        if kit.isOS:
                            noOS = False
                            break

                    if noOS:
                        repo.ostpe = None
                    repo.save()
                    repo.flush()
                        
                    self.logEvent("Finished deleting Kit %s-%s-%s from Repo: %s" % (kname,kversion,karch,repo_name), toStdout=False)
                    self.stdoutMessage('Kit: %s-%s-%s removed from repo: %s. Remember to refresh with -u\n', kname,kversion,karch,repo_name)
        else:
            self.logErrorEvent('No such kit. Please specify kit name, version and arch.')
            self.unlock()
            sys.exit(1)

    def update(self, repo_name):
        
        self.logEvent("Updating repo %s" % repo_name, toStdout=False)
        
        self.repoExists(repo_name)

        repo = self.dbs.Repos.select_by(reponame=repo_name)[0]
        
        if len(repo.kits) == 0:
            self.logErrorEvent('No OS kit added for repo: %s' % repo_name)
            self.unlock()
            sys.exit(1)

        if True not in [kit.isOS for kit in repo.kits]:
            self.logErrorEvent('No OS kit added for repo: %s' % repo_name)
            self.unlock()
            sys.exit(1)

        try:
            location = path('/' + self.repos_root + '/%s' % repo.repoid)
            if not path(path(self.prefix or '/') / self.repos_root / str(repo.repoid)).exists():
                path(path(self.prefix or '/') / self.repos_root / str(repo.repoid)).makedirs()
            repo.repository = str(location)
            
            repo.save()
            repo.flush()

            r = self.rfinst.getRepo(repo.repoid)
            self.stdoutMessage('Refreshing repo: %s. This may take a while...\n', repo_name)
            r.refresh(repo.repoid)

        except Exception, e:
            self.logErrorEvent('Unable to refresh repo: %s. Reason: %s' % (repo_name, e))
            self.unlock()
            sys.exit(1)
        

        row = self.dbs.AppGlobals.select_by(kname = 'DEPOT_REPOS_POST')
        if row: 
            script_path =  row[0].kvalue
        else:
            script_path = path('/depot/repos/post_scripts')
    
        self.callScripts(script_path, repo)
        self.logEvent("Finished updating repo %s" % repo_name, toStdout=False)
 
    def flushCache(self, repo_name):
        
        self.logEvent("Deleting cache for '%s' repo" % repo_name, toStdout=False)
        
        self.repoExists(repo_name)
        repo = self.dbs.Repos.select_by(reponame=repo_name)
        repo = repo[0]
        
        try:
            r = self.rfinst.getRepo(repo.repoid)
            r.flushCache()
        except Exception, e:
            self.logErrorEvent('Unable to delete cache for repo: %s. Reason: %s' % (repo_name, e))
            self.unlock()
            sys.exit(1)
        
        self.logEvent("Finished deleting cache for repo %s" % repo_name, toStdout=False)

    def delete(self, repo_name):
        
        self.logEvent("Deleting repo %s" % repo_name, toStdout=False)
        
        self.repoExists(repo_name)
        repo = self.dbs.Repos.select_by(reponame=repo_name)[0]
        ng = self.dbs.NodeGroups.select_by(repoid = repo.repoid)

        if ng:
            self.logErrorEvent('Cannot delete repo: %s. In use by nodegroup(s).' % repo_name)
            self.unlock()
            sys.exit(1)
        
        try:
            r = self.rfinst.getRepo(repo.repoid)
            r.delete()
        except RepoOSKitError: # no OS kit provided, cannot use specific repo delete
            repo_path = path(self.prefix or '/') / self.repos_root / str(repo.repoid)
            cache_path = path(self.prefix or '/') / self.repos_root / '.repocache' / str(repo.repoid)

            # Removes files
            if repo_path.exists(): repo_path.rmtree()
            if cache_path.exists(): cache_path.rmtree()

            # clean up database: repos and repos_have_kit table
            repos_have_kits = self.dbs.ReposHaveKits.select_by(repoid=repo.repoid)
            repo = self.dbs.Repos.get(repo.repoid)
            for obj in repos_have_kits + [repo]:
                obj.delete()
                obj.flush()         

        except Exception, e:
            self.logErrorEvent('Unable to delete repo: %s. Reason: %s' % (repo_name, e))
            self.unlock()
            sys.exit(1)

        row = self.dbs.AppGlobals.select_by(kname = 'DEPOT_REPOS_POST')
        if row:
            script_path =  row[0].kvalue
        else:
            script_path = path('/depot/repos/post_scripts')
        self.callScripts(script_path, repo, action='DELETE')
            
        self.logEvent("Finished deleting repo %s" % repo_name, toStdout=False)            

    def snapshot(self, repo_name):
        
        self.logEvent("Creating snapshot for repo: %s" % repo_name, toStdout=False)
        
        self.repoExists(repo_name)

        oldRepo = self.dbs.Repos.select_by(reponame=repo_name)
        oldRepo = oldRepo[0]

        newRepo = self.dbs.Repos()
        newRepo.reponame = oldRepo.reponame + '-snapshot %s' % time.asctime() 
        newRepo.reponame = newRepo.reponame.replace(':', '.')
        newRepo.reponame = newRepo.reponame.replace(' ', '_')
        newRepo.installers = oldRepo.installers
        newRepo.ostype = oldRepo.ostype
        newRepo.kits = oldRepo.kits
        newRepo.save()
        newRepo.flush()
        
        newrepo_path = path('/' + self.repos_root + '/%s' % newRepo.repoid)
        newRepo.repository = str(newrepo_path)
        newRepo.save()
        newRepo.flush()

        # use values from DB instead of hardcoded path.
        oldrepo_path = path(oldRepo.repository)
        tools.cpio_copytree(oldrepo_path, newrepo_path)

        row = self.dbs.AppGlobals.select_by(kname = 'DEPOT_REPOS_POST')
        if row: 
            script_path =  row[0].kvalue
        else:
            script_path = path('/depot/repos/post_scripts')
        self.callScripts(script_path, newRepo)

        self.logEvent("Finished creating snapshot for repo: %s" % repo_name, toStdout=False)

    def callScripts(self, scriptpath, repo, action='CREATE'):
       
        scriptpath = path(scriptpath)

        if not scriptpath.isdir():
            return

        env = os.environ.copy()
        env['REPO_NAME'] = repo.reponame
        env['REPO_ID'] = str(repo.repoid)
        env['REPO_REPOSITORY'] = repo.repository
        env['REPO_OSTYPE'] = repo.ostype 
        env['REPOMAN_ACTION']=action
 

        for f in scriptpath.listdir():
            if not f.isfile():
                continue

            st = f.stat()
            mode = st[stat.ST_MODE]
            if not (mode & stat.S_IEXEC):   # not executable
                continue
 
            cwd = scriptpath
            cmd = f

            retcode = 0
            try:
                p = subprocess.Popen(cmd,
                                     cwd=cwd,
                                     env = env,
                                     shell=True,
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE)
                out, err = p.communicate()
                retcode = p.returncode

            except:
                self.stderrMessage("Script: %s failed to run\n", f.basename())
                self.logEvent("Script: %s failed to run" % f.basename()) 

            if retcode:
                self.stderrMessage("@ Script: %s failed to run\n", f.basename())
                self.logEvent("@ Script: %s failed to run" % f.basename()) 
     
    def repoExists(self, repo_name):
        repo = self.dbs.Repos.select_by(reponame=repo_name)

        if not repo:
            self.logErrorEvent('No such repo: %s' % repo_name)
            self.unlock()
            sys.exit(1)
        else:
            return True

    def getActionDesc(self):
        if self.action == REPOMAN_NEW:
            return "Create repo" 
        elif self.action == REPOMAN_SNAPSHOT:
            return "Create snapshot"
        elif self.action == REPOMAN_LIST:
            return "List repos"
        elif self.action == REPOMAN_DELKIT:
            return "Delete kit from repo"
        elif self.action == REPOMAN_DELREPO:
            return "Delete repo"
        elif self.action == REPOMAN_ADDKIT:
            return "Add kit to repo"
        elif self.action == REPOMAN_UPDATE:
            return "Update repo"
        else:
            return KusuApp.getActionDesc(self)

    def run(self):
        atexit.register(self.unlock)
        self.parseArgs()

    def checkArgs(self, options):
        fail = False
        for opt in ['new', 'snapshot', 'list', 'delete', 'add', 'update', 'version', 'flush_cache']:
            val = getattr(options, opt)
            if val:
                if fail:
                    self.parser.print_help()
                    sys.stderr.write('Exactly one repoman operation expected.\n')
                    sys.exit(1)

                else:
                    fail = True
        
        for option in self.parser.option_list:
            if option.type == 'string':
                val = getattr(options, option.dest, None)
                if val and val.startswith('-'):
                    self.parser.print_usage()
                    self.stderrMessage('%s: error: %s/%s option requires an argument\n', 
                                      path(sys.argv[0]).basename(), option._short_opts[0],option._long_opts[0])
                    sys.exit(1)

        if not options.list and not options.version: 
            if options.reponame:
                if options.new or options.snapshot or options.delete or options.update or options.flush_cache:
                    return

                elif options.add or options.delete:
                    if not options.kit and not options.kid:
                        self.parser.print_help()
                        self.stderrMessage('No kit specified.\n')
                        sys.exit(1)

                elif not (options.new or options.snapshot or options.delete or options.add or options.update or options.flush_cache):
                    self.parser.print_help()
                    self.stderrMessage('No action specified. Requires: new | snapshot | delete | add | update | flush-cache\n')
                    sys.exit(1)

            else:
                if options.new or options.snapshot or options.delete or options.add or options.update or options.flush_cache:
                    self.parser.print_help()
                    self.stderrMessage('No repo/kit specified.\n')
                    sys.exit(1)

                else: 
                    self.parser.print_help()
                    self.stderrMessage('No action specified. Requires: new | snapshot | delete | add | update | flush-cache\n')
                    sys.exit(1)

        else:
            if options.reponame or options.new or options.snapshot or \
               options.delete or options.add or options.update or options.flush_cache:
                self.parser.print_help()
                self.parser.error(self._('Exactly one repoman operation expected.\n'))
                sys.exit(1)

        if options.dbdriver and options.dbdriver not in ['sqlite', 'mysql','postgres']:
            self.parser.print_help()
            self.stderrMessage('Invalid database driver.\n')
            sys.exit(1)
         
    def parseArgs(self):
        (options, args) = self.parser.parse_args()
        kl.debug("options: %s", options)
        kl.debug("args: %s", args)

        self.checkArgs(options)

        dbdriver = os.getenv('KUSU_DB_ENGINE')
        if not dbdriver or dbdriver not in ['mysql','postgres']:
            dbdriver = 'mysql' # default to mysql

        dbdatabase = 'kusudb'
        dbuser = 'apache'
        dbpassword = None

        if options.dbdriver:
            dbdriver = options.dbdriver
        if options.dbdatabase:
            dbdatabase = options.dbdatabase
        if options.dbuser:
            dbuser = options.dbuser
        if options.dbpassword:
            dbpassword = options.dbpassword

        try:
            self.dbs = db.DB(dbdriver, dbdatabase, dbuser, dbpassword)
        except (UnsupportedDriverError, NoSuchDBError):
            self.logErrorEvent('Unable to connect to the database. Please check database configuration.')
            sys.exit(1)
        
        try:
            self.dbs.Repos.select()
        except:
            self.logErrorEvent('Unable to connect to the database. Please check database configuration.')
            sys.exit(1)


        self.repos_root = path('/depot/repos')
        self.kits_root = path('/depot/kits')

        row = self.dbs.AppGlobals.select_by(kname = 'DEPOT_REPOS_ROOT')
        if row: self.repos_root = path(row[0].kvalue)
        
        row = self.dbs.AppGlobals.select_by(kname = 'DEPOT_KITS_ROOT')
        if row: self.kits_root = path(row[0].kvalue)

        if self.repos_root[0] == '/': self.repos_root = path(self.repos_root[1:])
        if self.kits_root[0] == '/': self.kits_root = path(self.kits_root[1:])

        self.kitops = KitOps()
        self.kitops.setDB(db.DB(dbdriver, dbdatabase, dbuser, dbpassword))
        
        self.lock()

        if options.prefix:
            self.prefix = path(options.prefix)
            self.rfinst = repofactory.RepoFactory(self.dbs, self.prefix, True)
        else:
            self.rfinst = repofactory.RepoFactory(self.dbs)

        if options.new:
            self.action = REPOMAN_NEW
            self.new(options.reponame)
        elif options.snapshot:
            self.action = REPOMAN_SNAPSHOT
            self.snapshot(options.reponame)
        elif options.list:
            self.action = REPOMAN_LIST
            self.list()
        elif options.delete:
            self.action = REPOMAN_DELKIT
            self.kid = None
            self.kitname = None
            self.kitarch = None
            self.kitversion = None
            if options.kid:
                self.kid = options.kid
            if options.kitversion:
                self.kitversion = options.kitversion
            if options.kitarch:
                self.kitarch = options.kitarch
            if options.kit:
                self.kitname = options.kit
            if options.kit or options.kid:
                kits = self.kitops.findKits(self.kitname, self.kid, self.kitversion, self.kitarch)
                if len(kits) > 1: 
                    self.logErrorEvent(
                        "There are multiple '%s' kits installed. Please specify the kit version and kit architecture." % options.kit)
                    self.unlock()
                    sys.exit(-1)

                if kits == []:
                    self.logErrorEvent("The kit '%s' could not be found" % self.kitname)
                    self.unlock()
                    sys.exit(-1)
                else:
                    self.kitversion = kits[0].version
                    self.kitarch =  kits[0].arch
                    self.kid = kits[0].kid
                    self.kitname = kits[0].rname
                    self.delKit(options.reponame, self.kid, self.kitname, self.kitversion, self.kitarch)
            elif options.kit or options.kitversion or options.kitarch:
                self.delKit(options.reponame, options.kid, options.kitversion, options.kitarch)
            elif options.reponame:
                self.action = REPOMAN_DELREPO
                self.delete(options.reponame)
        elif options.add:
            self.action = REPOMAN_ADDKIT
            self.kid = None
            self.kitname = None
            self.kitarch = None
            self.kitversion = None
            if options.kid:
                self.kid = options.kid
            if options.kitversion:
                self.kitversion = options.kitversion
            if options.kitarch:
                self.kitarch = options.kitarch
            if options.kit:
                self.kitname = options.kit
            if options.kit or options.kid:
                kits = self.kitops.findKits(self.kitname, self.kid, self.kitversion, self.kitarch)
                if len(kits) > 1:
                    self.logErrorEvent(
                        "Error: There are multiple '%s' kits installed. Please specify the kit version and kit architecture." % options.kit)
                    self.unlock()
                    sys.exit(-1)
           
                if kits == []:
                    self.logErrorEvent("The kit '%s' could not be found" % self.kitname)
                    self.unlock()
                    sys.exit(-1)
               
                else:
                    self.kitversion = kits[0].version
                    self.kitarch = kits[0].arch
                    self.kid = kits[0].kid
                    self.kitname = kits[0].rname
                    self.addKit(options.reponame, self.kid, self.kitname, self.kitversion, self.kitarch)
            else: 
                self.addKit(options.reponame, options.kid, options.kit, options.kitversion, options.kitarch)
        elif options.update:
            self.action = REPOMAN_UPDATE
            self.update(options.reponame)
        elif options.version:
            self.getVersion()
        elif options.flush_cache:
            self.flushCache(options.reponame)

        self.unlock()

    def list(self):
        headers = ['Repo name', 'Repository', 'Installers', 'Ostype', 'Kits' ]

        repos = self.dbs.Repos.select()
        for repo in repos:
            print "%s:\t%s" % (headers[0], repo.reponame)
            print "%s:\t%s" % (headers[1], repo.repository)
            print "%s:\t%s" % (headers[2], repo.installers)
            print "%s:\t\t%s" % (headers[3], (repo.ostype or ''))

            kitnames = []
            for kit in self.dbs.Repos.select_by(repoid = repo.repoid)[0].kits:
                if kit.is_os():
                    kitnames.append('%s-%s.%s-%s' % (kit.rname, kit.os.major, kit.os.minor, kit.arch)) 
                else:
                    kitnames.append('%s-%s-%s-%s' % (kit.rname, kit.version, kit.release, kit.arch)) 

            sys.stdout.write("%s:\t\t" % headers[4])

            kitline=""
            count=0
            for kit in kitnames:
                kitline += "%s" % kit

                if kit:
                    kitline += ", "

                if (count % 2):
                    kitline +="\n\t\t"
               
                count += 1

            if kitline[-2:-1] == ',':
                kitline = kitline[:-2]

            if kitline[len(kitline)-5:-4] == ',':
                kitline = kitline[:len(kitline)-5]

            sys.stdout.write("%s" % kitline)
            print "\n"
            
if __name__ == '__main__':

    if os.getuid() != 0:
        sys.stderr.write('You need to be root to run repoman.\n')
        sys.exit(1)


    kl = kusulog.getKusuLog()
    kl.addFileHandler(os.environ['KUSU_LOGFILE'])

    app = RepoManApp() 

    if app.islock():
        msg = 'Another instance of repoman is running. ' + \
              'Lock file found: %s' % app.getlockfile()
        app.logErrorEvent(msg)
        sys.exit(1)
    else:
        app.run()
