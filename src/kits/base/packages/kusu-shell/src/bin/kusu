#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2010 Platform Computing Inc.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of version 2 of the GNU General Public License as published by the
# Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA

import os
import sys

from path import path

KUSU_SHELL_PLUGIN_DIR = path(os.getenv("KUSU_ROOT", "/opt/kusu")) / 'lib' / 'plugins' / 'shell'

usage = """usage: kusu <PLUGIN>"""
local_options = {'-h': "%s\n\nAvailable plugins are loaded from %s" % (usage, KUSU_SHELL_PLUGIN_DIR),
                 '-v': "kusu version ${VERSION_STR}"}
local_options['--help'] = local_options['-h']
local_options['--version'] = local_options['-v']

def main(args):
    if len(args) < 2:
        sys.stderr.write("%s called with no arguments\n%s\n" % (args[0], usage))
        return 1

    if args[1] in local_options:
        sys.stdout.write(local_options[args[1]] + '\n')
        return 0

    command_class_map = _build_command_class_map()
    if args[1] in command_class_map:
        try:
            app = command_class_map[args[1]](args[1:])
            app.run()
            app.print_result()
            app.generate_output_artifacts()
        except (ValueError, RuntimeError), e:
            sys.stderr.write(e.args[0] + '\n')
            return 1
        return 0

    sys.stderr.write("Command '%s' not found\n" % args[1])
    return 1

def _build_command_class_map():
    """Return a dict mapping commands to classes.

    Each *.py file in KUSU_SHELL_PLUGIN_DIR is inspected. The value of
    KUSU_SHELL_COMMAND becomes a key into the command-class map, while the
    class named by the value of KUSU_SHELL_COMMAND_CLASS is the value of the
    command-class map. If any of KUSU_SHELL_COMMAND, KUSU_SHELL_COMMAND_CLASS
    or the class named by KUSU_SHELL_COMMAND_CLASS don't exist in the file, no
    entry in the command-class map will be made.

    The value of the command-class map can be directly instantiated. For
    example:

        status_app = command_class_map['status'](args[1:])

    is equivalent to:

        if command == 'status':
            status_app = StatusApp(args[1:])

    """
    command_class_map = {}

    for plugin_file in KUSU_SHELL_PLUGIN_DIR.files('*.py'):
        command = ''
        command_class = None
        ns = {}
        execfile(plugin_file, ns)

        try:
            command = ns['KUSU_SHELL_COMMAND']
            command_class_name = ns['KUSU_SHELL_COMMAND_CLASS']
            command_class = ns[command_class_name]
        except ValueError, e:
            sys.stderr.write("Plugin '%s' is missing KUSU_SHELL_COMMAND or KUSU_SHELL_COMMAND_CLASS" % plugin_file)

        if command and command_class:
            command_class_map[command] = command_class

    return command_class_map

if __name__ == "__main__":
    sys.exit(main(sys.argv))
