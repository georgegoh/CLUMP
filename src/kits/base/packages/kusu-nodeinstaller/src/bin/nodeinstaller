#!/usr/bin/env python
# $Id: nodeinstaller 2859 2007-11-28 18:58:18Z spstarr $
#
# Copyright 2007 Platform Computing Inc.
#
# Licensed under GPL version 2; See LICENSE for details.

import sys
import os
import re
import struct
import subprocess
import kusu.util.log as kusulog
# Sets up kusu logging
kl = kusulog.getKusuLog()
kl.addFileHandler()

from path import path
from kusu.core.app import KusuApp
from kusu.util.errors import *
from kusu.nodeinstaller import NodeInstaller, retrieveNII
from kusu.installer.util import remarkMBRs
from kusu.boot.tool import getPartitionMap, makeDev
from kusu.ui.text.screenfactory import *
from kusu.ui.text.navigator import Navigator, PlatformScreen
from primitive.system.hardware.nodes import checkAndMakeNode
from primitive.system.hardware.partitiontool import DiskProfile
from primitive.system.software.dispatcher import Dispatcher

class NodeInstallerError(KusuError): pass

class NINav(Navigator):
    def __init__(self, **kwargs):
        Navigator.__init__(self, **kwargs)

    def run(self):
        try:
            self.mainScreen = PlatformScreen(self.screenTitle)
            self.selectScreen(0)
            self.draw()
        except UserExitError, e:
            kl.debug('Caught UserExitError')
            if self.drawn: self.mainScreen.popWindow()
            self.mainScreen.finish()
            kl.debug('Returning False')
            return False
        except NodeInstallerError,e:
            sys.exit(2)
        except Exception, e:
            import traceback
            tb = traceback.format_exc()
            kusu_tmp = os.environ.get('KUSU_TMP', '/tmp/kusu')
            exception_log = open(path(kusu_tmp) / 'exception.dump', 'w')
            exception_log.write(tb)
            exception_log.close()
            friendly_msg = 'An unrecoverable error has occurred in the '
            friendly_msg += 'installation. The debug trace can be found '
            friendly_msg += 'in %s/exception.dump.\n\n' % kusu_tmp
            friendly_msg += 'The system will now reboot. Please remember '
            friendly_msg += 'to transfer out the trace before reboot.'
            self.popupMsg(self._('Unresolved exception'), tb)
            if self.drawn: self.mainScreen.popWindow()
            self.mainScreen.finish()
            raise e
        return True

class NodeInstallerApp(KusuApp):
    
    def __init__(self):
        KusuApp.__init__(self)

        self.actions = {'provision':['niihost'], 
            'get-nii':['niihost','node']}
        
        self.nodeinst = NodeInstaller()
        
        # self.action and self.actionargs will hold the current action and its arguments            
        self.action = None 
        self.actionargs = None

        self.usagestr = """\
nodeinstaller <action> arg1=val1 arg2=val2 ...

nodeinstaller is the automated version of the Kusu Installer. This
application is not meant to be run as a standalone application.

When run with no actions, nodeinstaller will attempt to automatically
run in provisioning mode.


actions:

    provision   - Starts the automatic installer for provisioning a node. 
                  Available arguments for this action:
                    niihost=<NII Server Address>
                                        
    get-nii     - Prints the Node Installation Information for a node to 
                  standard output. Available arguments for this action:
                    niihost=<NII Server Address>
                    node=<Name or IP Address of a Node>

"""
        self.parser.set_usage(self.usagestr)

    def printUsageExit(self):
        """ Print usage text and exit. """
        self.stdoutMessage(self.usagestr)
        sys.stdout.write(os.linesep)
        sys.exit(0)

    def printMsgExit(self, msg):
        """ Print msg and exit. """
        self.stdoutMessage(msg)
        sys.stdout.write(os.linesep)
        sys.exit(1)

    def handleArgPairs(self, arglist):
        """ Handle the argument list and return a dict of key-value pairs. """

        li = []
        d = {}

        for s in arglist:
            li2 = s.split('=')
            for s2 in li2: 
                if s2: li.append(s2)        

        # There should be even number of items in order to make pairs
        if not len(li) % 2: 
            # Collect the pairs
            while li:
                d[li[0].lower()] = li[1]
                del li[0:2]

        return d

    def parseargs(self):
        """ App-specific arguments goes here. """

        self.options, self.args = self.parser.parse_args()

        if not self.args :
            # run in provision mode
            kl.debug('Running in automatic provision mode')
            self.args.append('provision')
            
            # grab the /proc/cmdline and look for niihost
            cmdline = open('/proc/cmdline').read()
            cmdlist = cmdline.strip('\n').split()
            for l in cmdlist:
                if l.startswith('niihost='):
                    self.args.append(l)

        # check if the first parsed argument is a supported action
        action = self.args[0]

        if action not in self.actions.keys():
            self.printUsageExit()
        d = self.handleArgPairs(self.args[1:])

        if not d:
            self.printUsageExit()

        # iterate keys in d and validate against the commands'
        # list of keys
        for k in d.keys():
            if k not in self.actions[action]:
                self.printUsageExit()

        self.action = action
        self.actionargs = d
     
    def run(self):
        """ Main launcher. """
        kl.debug('Starting nodeinstaller')
        
        self.parseargs()
        
        # call the correct sub-handler for the action
        m = '_' + self.action.split('-')[0] \
            + ''.join([l.capitalize() for l in self.action.split('-')[1:]])
            
        handler = getattr(self,m)
        
        handler(self.actionargs)
        kl.debug('Finishing launcher')
    
        sys.exit(0)

    def _provision(self, args):
        """Handler for provision. args is a dict of supported key-value pairs for this action. """
        niihost = args.get('niihost',None)
        kl.addSysLogHandler(host=niihost)

        import kusu.hardware.probe
        disks_dict = kusu.hardware.probe.getDisks()
        disks_str = disks_dict.keys()
        for d in disks_dict.values():
            disks_str += d['partitions']
        disks_str += kusu.hardware.probe.getCDROM().keys()

        for dev in disks_str:
            checkAndMakeNode('/dev/' + dev)

        if not niihost: sys.exit(2)
        autoinstall_conf = '/tmp/kusu/%s' % Dispatcher.get('autoinstall_conf')
        class NIIScreenFactory(ScreenFactory):
            name = 'nodeinstaller'
            ScreenFactory.screens = [ProgressScreen(niihost, autoinstall_conf)]
        feedback = NINav(screenFactory=NIIScreenFactory, screenTitle='Installing Node',
                         showTrail=True, showNavButtons=False)
        try:
            return_code = feedback.run()
        except UserExitError, e:
            return
        except Exception, e:
            exceptionHandler(e)


    def _getNii(self, args):
        """Handler for get-nii. args is a dict of supported key-value pairs for this action. """
        niihost = args.get('niihost',None)
        node = args.get('node',None)
        
        kl.debug('niihost : %s' % niihost)
        kl.debug('node : %s' % node)        
        if not niihost:
            msg = self._('Please specify a NII Host server.')
            self.printMsgExit(msg)
            
        if not node:
            msg = self._('Please specify a node name or node ip address.')
            self.printMsgExit(msg)
                  
        nii = retrieveNII(niihost)
        if nii: print nii

def exceptionHandler(error):
    kl.debug('General Exception caught')
    import traceback
    tb = traceback.format_exc()
    kl.debug(tb)
    sys.exit(1)

import snack
from kusu.util.errors import UserExitError
class ProgressScreen(BaseScreen):

    def __init__(self, niihost, autoinstall_conf):
        BaseScreen.__init__(self)
        kl.debug('niihost: %s' % niihost)
        self.niihost = niihost
        self.autoinstall_conf = autoinstall_conf
        self.autoinstall_type = Dispatcher.get('autoinstall_type')

    def displayDiskProfileState(self, diskprofile):
        s = str(diskprofile) + '\n\n'
        s = s + 'LVM Fifo:\n'
        s = s + diskprofile.reprLVMFifo()
        self.selector.popupMsg('Internal Partitiontool State', s, width=60)
        return NAV_NOTHING

    def disambiguateDiskOrder(self, disk_profile, interactive=True, fix=False):
        """
        If there are disks which share the same MBR signature, disambiguate
        them by rewriting the duplicate signatures with unique ones.
        System needs to be rebooted for the kernel EDD code to read the MBR
        signatures by BIOS order.
        """
        disk_order = disk_profile.getBIOSDiskOrder()
        disk0 = disk_profile.disk_dict[disk_order[0]]
        disk0_mbrsig = disk0.mbr_signature

        duplicates = []
        for k in disk_order[1:]:
            d = disk_profile.disk_dict[k]
            if d.mbr_signature == disk0.mbr_signature:
                duplicates.append(k)

        if not duplicates:
            return disk_order

        if interactive:
            if fix:
                msg = 'The installer cannot automatically determine the first '
                msg += 'disk that this system boots from due to duplicate MBR '
                msg += 'signatures on some disks.\n\n'
                msg += 'To proceed, Kusu needs to make changes to the MBR signature '
                msg += 'of the affected disks and reboot. On reboot, the installer '
                msg += 'will then be able to determine which disk the system boots '
                msg += 'from.\n\n'
                msg += 'Please click "OK" to proceed, or power off now to stop the '
                msg += 'installation'
                self.selector.popupMsg('Cannot determine the first disk', msg,60)
                remarkMBRs(dp)
                subprocess.call(['reboot'])
            else:
                msg = 'The installer cannot automatically determine the first '
                msg += 'disk that this system boots from due to duplicate MBR '
                msg += 'signatures on some disks.\n\n'
                msg += 'Please refer to the installation guide for more information.'
                self.selector.popupDialogBox('Cannot determine the first disk', msg, ['Reboot'])
                subprocess.call(['reboot'])

        # else not interactive
        if fix:
            remarkMBRs(disk_profile)
        subprocess.call(["reboot"])


    def drawImpl(self):
        kl.debug('Downloading NII..')
        dlg = self.selector.popupProgress('Node Install Info', 'Downloading Node install info...')
        self.niisource = retrieveNII(self.niihost)
        self.nodeinst = NodeInstaller(self.niisource)
        dlg.close()

        if self.nodeinst.installtype != 'diskless':
            kl.debug('Checking if disks are available')
            dlg = self.selector.popupProgress('Checking for Disks',
                                              'Checking for the presence of usable disks...')
            dp = DiskProfile(fresh=False)
            dlg.close()
            if not dp.disk_dict:
                self.selector.popupMsg('No Disk Found',
                                       'No disk was found for installation. Press "OK" to reboot.')
                raise NodeInstallerError

        dlg = self.selector.popupProgress('Preparing %s' % self.autoinstall_type, \
                                          'Preparing %s files...' % self.autoinstall_type)
        tmp_disk_profile = DiskProfile(False)
        disk_order = self.disambiguateDiskOrder(tmp_disk_profile)
        kl.debug('Disk order: %s' % str(disk_order))

        # Ensure parent directory already exists
        if not os.path.exists(os.path.dirname(self.autoinstall_conf)):
            os.makedirs(os.path.dirname(self.autoinstall_conf))

        try:
            self.nodeinst.setup(self.autoinstall_conf, self.niihost, disk_order)
        except LVMPreservationError, e:
            dlg.close()
            errMsg = str(e) + """\nPlease back up your data, remove the
above-mentioned volume group, and press OK to reboot"""
            self.selector.popupMsg('LVM Error', errMsg)
            raise NodeInstallerError
        
        dlg.close()

        kl.debug('Setting timezone')
        dlg = self.selector.popupProgress('Setting Timezone', 'Setting the timezone...')
        self.nodeinst.setTimezone()
        dlg.close()

        kl.debug('Committing disk profile')
        dlg = self.selector.popupProgress('Partitioning Disks', 'Initializing disks...')
#        self.displayDiskProfileState(self.nodeinst.ksprofile.diskprofile)
        self.nodeinst.commit()
        dlg.close()
#        self.selector.popupMsg('Partitioning', 'Finished Partitioning disks.')
        kl.debug('Finished partitioning disks')

        # We need to perform the generation of the autoinstall configuration file after
        # disk profile is committed to the disk.
        kl.debug('Writing profile into %s file %s.' % (self.autoinstall_type, self.autoinstall_conf))
        self.nodeinst.generateAutoinstall()

        kusu_prefix = '/kusu/mnt'

        kl.debug('Mounting filesystem')
        dlg = self.selector.popupProgress('Mounting Filesystem', 'Mounting filesystem...')
        self.nodeinst.mountKusuMntPts(kusu_prefix)
        kl.debug('Set the installation flag')
        self.nodeinst.setInstallFlag(kusu_prefix)
        dlg.close()

        kl.debug('Copying public keys')
        dlg = self.selector.popupProgress('SSH Public Keys', 'Downloading SSH public keys...')
        self.nodeinst.getSSHPublicKeys(self.niihost, kusu_prefix)
        dlg.close()
        
        kl.debug('Generating /etc/profile.nii')
        dlg = self.selector.popupProgress('Setting profile.nii', 'Generating file...')
        self.nodeinst.generateProfileNII(kusu_prefix)
        dlg.close()

        kl.debug('Copying /opt/kusu/etc/db.passwd')
        dlg = self.selector.popupProgress('Db Passwd', 'Copying db.passwd...')
        self.nodeinst.getDbPasswd(kusu_prefix)
        dlg.close()

        kl.debug('Downloading custom scripts')
        dlg = self.selector.popupProgress('Downloading custom scripts',
                                          'Downloading custom scripts')
        self.nodeinst.download_scripts(self.niihost, prefix=kusu_prefix)
        dlg.close()

        kl.debug('Copying out kusu.log and %s to /root' % Dispatcher.get('autoinstall_conf'))
        dlg = self.selector.popupProgress('Backup log and config',
                                          'Copying out kusu.log and ' + \
                                          '%s to /root' % Dispatcher.get('autoinstall_conf'))
        self.nodeinst.saveLogs(destdir='%s/root' % kusu_prefix, prefix='/tmp/kusu')
        dlg.close()
        raise UserExitError

if __name__ == '__main__':
    # set up tty3 for logging output
    if os.access("/dev/tty3", os.W_OK):
        kl.addFileHandler('/dev/tty3')

    app = NodeInstallerApp()
    app.run()
