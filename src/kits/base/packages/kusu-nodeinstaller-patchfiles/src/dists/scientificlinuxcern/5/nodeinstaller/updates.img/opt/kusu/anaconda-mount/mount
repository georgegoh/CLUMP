#!/usr/bin/env python
#
# Copyright (C) 2010 Platform Computing Inc
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
# 	
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
#
# $Id: mount 3629 2010-03-12 09:11:20Z binxu $

# This module is meant to be a standalone 'mount' command replacement for
# ext2 and ext3 partitions.
#
# Run this file to see usage instructions.
#

import sys
from path import path
from optparse import OptionParser

# convenience function for stderr.
error = sys.stderr.write

# exit with error if anaconda not found.
ANACONDA_PATH=path('/usr/lib/anaconda')
if not ANACONDA_PATH.exists():
    error('ERROR: anaconda libraries not present in %s\n' % ANACONDA_PATH)
    sys.exit(1)

sys.path.append(ANACONDA_PATH)
import isys

SUPPORTED_FSTYPES=['ext2', 'ext3']

def parse_args(args):
    """
    Parse the arguments given to the mount program. The arguments should be:
        <device> <mountpoint> -t <fstype>
    """
    parser = OptionParser(usage='%s <device> <mountpoint> -t <fstype> [-r]' % sys.argv[0])
    parser.add_option('-t', action='store', dest='fstype',
                      help='Filesystem type (REQUIRED)')
    parser.add_option('-r', action='store_true', dest='readonly',
                      help='Read only mode (OPTIONAL)')
    (options, args) = parser.parse_args()

    if len(args) < 2 or not options:
        error('Insufficient args supplied.\n')
        parser.print_usage()
        sys.exit(1)

    device = args[0]
    mountpoint = args[1]
    fstype = options.fstype
    readonly = 0
    if options.readonly:
        readonly = 1

    # validate paths
    if not path(device).exists():
        error('ERROR: device path given does not exist.\n')
        sys.exit(1)
    if not path(mountpoint).exists():
        error('ERROR: mountpoint path given does not exist.\n')
        sys.exit(1)
    if not fstype in SUPPORTED_FSTYPES:
        error('ERROR: given filesystem type(%s) is not supported.\n' % fstype)
        error('       Supported filesystems: %s\n' % SUPPORTED_FSTYPES)
        sys.exit(1)

    return (device, mountpoint, fstype, readonly)


if __name__ == "__main__":
    device, mountpoint, fstype, readonly = parse_args(sys.argv)
    try:
        isys.mount(device, mountpoint, fstype, readOnly=readonly)
    except Exception, e:
        error(str(e))
        sys.exit(1)
