#!/usr/bin/env python
# $Id$
#
# Copyright 2010 Platform Computing Inc.
#
# Licensed under GPL version 2; See COPYING for details.
#

import os
import sys
from kusu.core.app import KusuApp

if os.getuid() != 0:
    KusuApp().errorMessage("nonroot_execution\n")
    sys.exit(-1)

from kusu.core import database as sadb
from kusu.kitinstall.helper import exit_with_msg
from kusu.kitinstall.kitinstall import KitInstall

try:
    set
except NameError:
    from sets import Set as set

from optparse import OptionParser

class KitInstallApp(KusuApp):
    def __init__(self):
        KusuApp.__init__(self)

        engine = os.getenv('KUSU_DB_ENGINE', 'postgres')
        self.dbs = sadb.DB(driver=engine, db='kusudb', username='apache')

        self.repos = []

        self.usage = """usage: %prog [options] source

source: kit iso file or a mount point or directory containing the kit."""

        self.parser = OptionParser(self.usage)
        self.parser.add_option('-v', '--version', dest='version', action='store_true',
            default=False, help='Display version information')
        self.parser.add_option('-r', '--repolist', dest='repolist', action='store',
            help = 'Add kit(s) to this comma separated list of repositories.')


    def getVersion(self):
        print 'kusu-kit-install version %s\n' % self.version


    def parseArgs(self):
        '''Parse command line arguments and options.
        '''

        options, args = self.parser.parse_args()

        if options.version and (options.repolist):
            self.parser.print_help()
            exit_with_msg('Error: No other options can be used with -v/--version option.')
        elif options.version and len(args) > 0:
            self.parser.print_help()
            exit_with_msg('Error: Arguments cannot be used with -v/--version option.')
        elif options.version:
            self.getVersion()
            sys.exit(0)

        # Takes exactly one argument, <source>
        if not args:
            self.parser.print_help()
            exit_with_msg('Missing required argument: <source>', exitcode=1)
        if len(args) > 1:
            self.parser.print_help()
            exit_with_msg('Error: unclaimed arguments: %s.' % args[1:])

        self.source = args[0]

        # Option repolist is the comma separated list of repos to operate on
        if options.repolist:
            repos = [repo.strip() for repo in options.repolist.split(',')]

            for repo in repos:
                try:
                    self.dbs.Repos.selectone_by(reponame=repo)
                except:
                    exit_with_msg('Error: No repository named %s was found.' % repo)

            self.repos = list(set(repos))
        # Use default repo if not specified
        else:
            try:
                default_repo = self.dbs.NodeGroups.selectone_by(type='installer').repo
            except:
                exit_with_msg('Error: Default repository cannot be found. Please specify other '\
                              'repos using -r/--repolist option.')

            self.repos = [default_repo.reponame]


    def run(self):
        self.parseArgs()
        installer = KitInstall()
        installer.deployKits(self.source, self.repos)


if __name__ == '__main__':
    app = KitInstallApp()
    app.run()
