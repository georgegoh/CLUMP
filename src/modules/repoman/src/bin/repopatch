#!/usr/bin/env python
#
# $Id: repo.py 1732 2007-07-26 06:21:43Z ltsai $
#
# Copyright 2007 Platform Computing Inc.
#
# Licensed under GPL version 2; See LICENSE file for details.
#

from kusu.util.errors import *
from kusu.core import database as db
from kusu.core.app import KusuApp
from kusu.repoman import repofactory
from kusu.repoman import tools
import kusu.util.log as kusulog

from path import path
import os
import sys
import time
from optparse import SUPPRESS_HELP, OptionParser

try:
    import subprocess
except:
    from popen5 import subprocess

class RepoPatchApp(KusuApp):
    """ Application class for repoman. """

    prefix = None
 
    def __init__(self):
        """ App-specific initialization. """
        KusuApp.__init__(self)
  
        usage = """repopatch [-h | --help]
                 [-v | --version]
                 [-r reponame | --reponame reponame]
                 [--dbdriver]
                 [--dbdatabase]
                 [--dbuser]
                 [--dbpassword]
"""
        usage = self._(usage)
        self.parser = OptionParser(usage)
   
        # setup command line parser
        self.parser.add_option('-r', '--repo', dest='repo_name', help=self._('repo name'))
        self.parser.add_option('-v', '--version', dest='version', action="store_true", help=self._('Display version of tool'))
        self.parser.add_option('-p', '--prefix', dest='prefix', help=SUPPRESS_HELP)
        self.parser.add_option('--dbdriver', dest='dbdriver',
                               help=self._('Database driver (sqlite, mysql)'))
        self.parser.add_option('--dbdatabase', dest='dbdatabase',
                               help=self._('Database'))
        self.parser.add_option('--dbuser', dest='dbuser',
                               help=self._('Database username'))
        self.parser.add_option('--dbpassword', dest='dbpassword',
                               help=self._('Database password'))

    def getVersion(self):
        self.stdoutMessage('Repopatch ${VERSION_STR}\n')

    def update(self, repo_name):
        self.repoExists(repo_name)

        repo = self.dbs.Repos.select_by(reponame = repo_name)[0]
        repoObj = self.rfinst.getRepo(repo.repoid)

        kusu_root = path(os.environ.get('KUSU_ROOT', '/opt/kuus'))

        if self.prefix:
            repoObj.setConfig(self.prefix / 'opt' / 'kusu' / 'etc' / 'updates.conf')
        else:
            repoObj.setConfig(kusu_root / 'etc' / 'updates.conf')

        self.stdoutMessage('Getting updates for %s. This may take awhile...\n', repoObj.ostype)
        try:
            pkgs, newKernels = repoObj.getUpdates()
        except Exception, e:
            self.stderrMessage('Unable to get updates. Reason: %s\n', e)
            self.unlock()
            sys.exit(1)

        if newKernels:
            self.stdoutMessage('New kernel(s) found:\n\t%s\n', 
                               '\n\t'.join(sorted([k.getFilename().basename() for k in newKernels.getList()])))

            result = None
            while result not in ['yes', 'y', 'no', 'n']:
                self.stdoutMessage('Do you wish to include them? (Yes or No): ')
                result = raw_input().strip()

                result = result.lower()
                if result in ['yes', 'y']:
                    yes = True
                elif result in ['no', 'n']:
                    yes = False
                    
            if not yes:
                for k in newKernels.getList():
                    if k in pkgs: pkgs.remove(k)
                        
        else:
            # no updated kernel at all
            yes = False
 
        self.stdoutMessage('Making new update kit.\n')
        try:
            kitdir, kitName, kitVersion, kitRelease, kitArch, kernelPkgs = repoObj.makeUpdateKit(pkgs)
            repoObj.addUpdateKit(kitdir)
        except Exception, e:
            self.stderrMessage('Unable to add update kit. Reason: %s\n', e)
            self.unlock()
            sys.exit(1)

        oldUpdateKits = []
        if kitRelease > 1:
            # find the previous update kit
            oldUpdateKits = self.dbs.Kits.select_by(self.dbs.Kits.c.version.like('%s_r%%' % repoObj.os_version),
                                                    rname = kitName, 
                                                    arch = kitArch)

        updateKit = self.dbs.Kits.select_by(rname = kitName, 
                                            version = kitVersion,
                                            arch = kitArch)[0]

        ngs = self.dbs.NodeGroups.select_by(repoid = repo.repoid)
        
        # remove old update kit
        for ng in ngs:
            for oldUpdateKit in oldUpdateKits:
                if oldUpdateKit.components[0] in ng.components:
                    ng.components.remove(oldUpdateKit.components[0])
                
                if oldUpdateKit in repo.kits:
                    repo.kits.remove(oldUpdateKit)
                    
            ng.save()
            ng.flush()

        # add new update kit
        for ng in ngs:
            ng.components.append(updateKit.components[0])
            ng.save()
            ng.flush()

        repo.kits.append(updateKit)
        repo.save_or_update()
        repo.flush()

        self.stdoutMessage('Refreshing repo. This may take awhile...\n')
        try:
            repoObj.refresh(repoObj.repoid)
        except Exception, e:
            self.stderrMessage('Unable to add refresh repo. You may refresh manually via repoman -u. Reason: %s\n', e)
            self.unlock()
            sys.exit(1)

        if yes:
            self.stdoutMessage('Updating initrd and vmlinuz...\n')
            try:
                repoObj.updateInitrdVmlinuz(kitVersion , repo, kernelPkgs)
            except Exception, e:
                self.stderrMessage('Unable to update initrd and vmlinuz. Reason: %s\n', e)
                self.unlock()
                sys.exit(1)

    def run(self):
        self.parseArgs()
 
    def parseArgs(self):
        (options, args) = self.parser.parse_args()
        kl.debug("options: %s", options)
        kl.debug("args: %s", args)

        if args:
            sys.stderr.write("No more arguments expected. Remaining args: %s" %
                             args)
            sys.exit(1)
      
        dbdriver = 'mysql'
        dbdatabase = 'kusudb'
        dbuser = 'apache'
        dbpassword = None

        if options.dbdriver:
            dbdriver = options.dbdriver
        if options.dbdatabase:
            dbdatabase = options.dbdatabase
        if options.dbuser:
            dbuser = options.dbuser
        if options.dbpassword:
            dbpassword = options.dbpassword

        self.dbs = db.DB(dbdriver, dbdatabase, dbuser, dbpassword)
        self.lock()

        if options.prefix:
            self.prefix = path(options.prefix)
            self.rfinst = repofactory.RepoFactory(self.dbs, self.prefix, True)
        else:
            self.rfinst = repofactory.RepoFactory(self.dbs)

        if options.repo_name:
            self.update(options.repo_name)       
        elif options.version:
            self.getVersion() 
        else:
            self.parser.print_help()
            self.unlock()
            sys.exit(1)

        self.unlock()

    def repoExists(self, repo_name):
        repo = self.dbs.Repos.select_by(reponame=repo_name)

        if not repo:
            print self._('No such repo')
            self.unlock()
            sys.exit(1)
        else:
            return True


if __name__ == '__main__':
    if os.getuid() != 0:
        sys.stderr.write('You need to be root to run repopatch.\n')
        sys.exit(1)

    kl = kusulog.getKusuLog()
    kl.addFileHandler(os.environ['KUSU_LOGFILE'])

    app = RepoPatchApp() 
    
    if app.islock():
        sys.stderr.write('Another instance of repopatch is running.\n')
        sys.stderr.write('Lock file found: %s\n' % app.getlockfile())
        sys.exit(1)
    else:
        app.run()
