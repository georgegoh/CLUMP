#!/usr/bin/env python
#
# $Id: repo.py 1732 2007-07-26 06:21:43Z ltsai $
#
# Copyright 2007 Platform Computing Inc.
#
# Licensed under GPL version 2; See LICENSE file for details.
#

from kusu.util.errors import *
from kusu.core import database as db
from kusu.core.app import KusuApp
from kusu.kitops.kitops import *
from kusu.repoman import repofactory
from kusu.repoman import tools as repotools
from kusu.util import tools
import kusu.util.log as kusulog

from path import path
import os
import time
import sys
from optparse import SUPPRESS_HELP, OptionParser

try:
    import subprocess
except:
    from popen5 import subprocess

class RepoManApp(KusuApp):
    """ Application class for repoman. """

    prefix = None
 
    def __init__(self):
        """ App-specific initialization. """
        KusuApp.__init__(self)

        usage = """repoman [-h | --help]
               [-v | --version]
               [-l |  --list]
               [-s | --snapshot]
               [-u | --update]
               [--dbdriver]
               [--dbdatabase]
               [--dbuser]
               [--dbpassword]
               [-n | --new] [-r reponame | --reponame reponame]
               [-a | --add] [-k | --kit <name> [-o <version> | --kitversion <version>] [ -c <arch> | --kitarch <arch>]]
               [-e | --delete] [--kit <name> [-o <version> | --kitversion <version> ] [-c <arch> | --kitarch <arch>]]
               [-e | --delete] [-r reponame | --reponame reponame]

For examples:
    repoman -n -r "Example repo"
    repoman -e -r "Example repo"

    repoman -r "Example repo" -a --kit fedora
    repoman -r "Example repo" -a --kit fedora --kitversion 6 --kitarch i386

    repoman -r "Example repo" -e --kit fedora
    repoman -r "Example repo" -e --kit fedora --kitversion 6 --kitarch i386
"""
        usage = self._(usage)
        self.parser = OptionParser(usage)

        # setup command line parser
        self.parser.add_option('-n', '--new', dest='new', action="store_true", help=self._('creates a new repo'))
        self.parser.add_option('-r', '--reponame', dest='reponame', help=self._('repo name'))
        self.parser.add_option('-k', '--kit', dest='kit', help=self._('kit name'))
        self.parser.add_option('-o', '--kitversion', dest='kitversion', help=self._('kit version'))
        self.parser.add_option('-c', '--kitarch', dest='kitarch', help=self._('kit arch'))
        self.parser.add_option('-a', '--add', dest='add', action="store_true", help=self._('add kit'))
        self.parser.add_option('-u', '--update', dest='update', action="store_true", help=self._('update repo'))
        self.parser.add_option('-l', '--list', dest='list', action="store_true", help=self._('list repos'))
        self.parser.add_option('-e', '--delete', dest='delete', action="store_true", help=self._('delete kit/repo'))
        self.parser.add_option('-s', '--snapshot', dest='snapshot', action="store_true", help=self._('snapshot repo'))
        self.parser.add_option('-p', '--prefix', dest='prefix', help=SUPPRESS_HELP)
        self.parser.add_option('-v', '--version', dest='version', action="store_true", help=self._('Display version of tool'))
        self.parser.add_option('--dbdriver', dest='dbdriver',
                               help=self._('Database driver (sqlite, mysql)'))
        self.parser.add_option('--dbdatabase', dest='dbdatabase',
                               help=self._('Database'))
        self.parser.add_option('--dbuser', dest='dbuser',
                               help=self._('Database username'))
        self.parser.add_option('--dbpassword', dest='dbpassword',
                               help=self._('Database password'))

    def getVersion(self):
        self.stdoutMessage('Repoman ${VERSION_STR}\n')

    def new(self, repo_name):

        repo = self.dbs.Repos.select_by(reponame=repo_name)

        if repo:
            self.stderrMessage('Repo exists.\n')
            self.unlock()
            sys.exit(1)
        
        repo = self.dbs.Repos()
        repo.reponame = repo_name

        row = self.dbs.AppGlobals.select_by(kname = 'PrimaryInstaller')[0]
        masterNode = self.dbs.Nodes.select_by(name=row.kvalue)[0]
        repo.installers = ';'.join([nic.ip for nic in masterNode.nics if nic.ip])
        
        repo.save()
        repo.flush()

        location = path('/depot/repos/%s' % repo.repoid)
        path(path(self.prefix or '/') / 'depot' / 'repos' / str(repo.repoid)).makedirs()
        repo.repository = str(location)
        
        repo.save()
        repo.flush()

        self.stdoutMessage('Repo: %s created. You can now add kits, including OS kits to the new repo.\n', repo_name)

    def addKit(self, repo_name, kname, kversion, karch):

        self.repoExists(repo_name)

        kits = self.dbs.Kits.select_by(rname = kname, version=kversion, arch=karch)

        if kits:
            kit = kits[0]

            if len(kits) > 1:
                self.stderrMessage('There is more than 1 kit.\n')
                self.unlock()
                sys.exit(1)

            else:
                repo = self.dbs.Repos.select_by(reponame = repo_name)[0]

                if kit.isOS:
                    if True in [kit.isOS for kit in repo.kits]:
                        self.stderrMessage('An OS kit has been already added.\n')
                        self.unlock()
                        sys.exit(1)
                        
                if kit in repo.kits:
                    self.stderrMessage('Kit has been already added.\n')
                    self.unlock()
                    sys.exit(1)

                else:
                    if kit.isOS:
                        repo.ostype = '%s-%s-%s' % (kname,kversion,karch)

                    repo.kits.append(kit)
                    repo.save()
                    repo.flush()

                    self.stdoutMessage('Kit: %s %s %s added to repo: %s. Remember to refresh with -u\n', kname,kversion,karch,repo_name)
        else:
            self.stdoutMessage('No such kit. Please specify kit name, version and arch.\n')
            self.unlock()
            sys.exit(1)

    def delKit(self, repo_name, kname, kversion, karch):
        self.repoExists(repo_name)

        kits = self.dbs.Kits.select_by(rname = kname, version=kversion, arch=karch)

        if kits:
            kit = kits[0]

            if len(kits) > 1:
                self.stderrMessage('More than 1 kit is available.\n')
                self.unlock()
                sys.exit(1)
            else:
                repo = self.dbs.Repos.select_by(reponame = repo_name)[0]

                if not kit in repo.kits:
                    self.stderrMessage('No such kit in repo: %s\n', repo_name)
                    self.unlock()
                    sys.exit(1)
                else:
                    ngs = self.dbs.NodeGroups.select_by(repoid = repo.repoid)

                    ngInUse = []
                    for ng in ngs:
                        if kit in repotools.getKits(self.dbs, ng.ngname):
                            ngInUse.append(ng.ngname)
                            
                    if ngInUse:
                        self.stdoutMessage('Kit: %s %s %s in use by nodegroup(s):\n%s\n', kname,kversion,karch, '\n'.join(ngInUse))
                        self.unlock()
                        sys.exit(1)

                    repo.kits.remove(kit)
                    
                    noOS = True
                    for kit in repo.kits:
                        if kit.isOS:
                            noOS = False
                            break

                    if noOS:
                        repo.ostpe = None
                    repo.save()
                    repo.flush()
                        
                    self.stdoutMessage('Kit: %s %s %s removed from repo: %s. Remember to refresh with -u\n', kname,kversion,karch,repo_name)
        else:
            self.stderrMessage('No such kit. Please specify kit name, version and arch.\n')
            self.unlock()
            sys.exit(1)

    def update(self, repo_name):
        self.repoExists(repo_name)

        repo = self.dbs.Repos.select_by(reponame=repo_name)[0]
        
        if len(repo.kits) == 0:
            self.stderrMessage('No OS kit added for repo: %s\n', repo_name)
            self.unlock()
            sys.exit(1)

        if True not in [kit.isOS for kit in repo.kits]:
            self.stderrMessage('No OS kit added for repo: %s\n', repo_name)
            self.unlock()
            sys.exit(1)

        self.stdoutMessage('Refreshing repo: %s. This may take a while...\n', repo_name)
        r = self.rfinst.getRepo(repo.repoid)

        try:
            r.refresh(repo.repoid)
        except Exception, e:
            self.stderrMessage('Unable to refresh repo. Reason: %s\n', e)
            self.unlock()
            sys.exit(1)

    def delete(self, repo_name):
        self.repoExists(repo_name)
        repo = self.dbs.Repos.select_by(reponame=repo_name)
        repo = repo[0]    
        ng = self.dbs.NodeGroups.select_by(repoid = repo.repoid)

        if ng:
            self.stderrMessage('Cannot delete repo. In used by nodegroups.\n')
            self.unlock()
            sys.exit(1)
        else:
            p = path(self.prefix or '/') / 'depot' / 'repos' / str(repo.repoid)
            if p.exists(): p.rmtree()

            repo.repos = None
            repo.delete()
            repo.flush()

    def snapshot(self, repo_name):
        self.repoExists(repo_name)

        oldRepo = self.dbs.Repos.select_by(reponame=repo_name)
        oldRepo = oldRepo[0]

        newRepo = self.dbs.Repos()
        newRepo.reponame = oldRepo.reponame + '(snapshot %s)' % time.asctime() 
        newRepo.installers = oldRepo.installers
        newRepo.ostype = oldRepo.ostype
        newRepo.kits = oldRepo.kits
        newRepo.save()
        newRepo.flush()
        
        location = path('/depot/repos/%s' % newRepo.repoid)
        newRepo.repository = str(location)
        newRepo.save()
        newRepo.flush()

        src = path(self.prefix or '/') / 'depot' / 'repos' / str(oldRepo.repoid)
        dest = path(self.prefix or '/') / 'depot' / 'repos' / str(newRepo.repoid)
        tools.cpio_copytree(src, dest)

    def repoExists(self, repo_name):
        repo = self.dbs.Repos.select_by(reponame=repo_name)

        if not repo:
            self.stderrMessage('No such repo: %s\n', repo_name)
            self.unlock()
            sys.exit(1)
        else:
            return True

    def run(self):
        self.parseArgs()

    def checkArgs(self, options):
        fail = False
        for opt in ['new', 'snapshot', 'list', 'delete', 'add', 'update', 'version']:
            val = getattr(options, opt)
            if val:
                if fail:
                    self.parser.print_help()
                    sys.stderr.write('Exactly one repoman operation expected.\n')
                    sys.exit(1)

                else:
                    fail = True

        if not options.list and not options.version: 
            if options.reponame:
                if options.new or options.snapshot or options.delete or options.update:
                    return

                elif options.add or options.delete:
                    if not options.kit:
                        self.parser.print_help()
                        self.stderrMessage('No kit specified.\n')
                        sys.exit(1)

                elif not (options.new and options.snapshot and options.delete and options.add and options.update):
                    self.parser.print_help()
                    self.stderrMessage('No action specified. Requires: new | snapshot | delete | add | update\n')
                    sys.exit(1)

            else:
                if options.new or options.snapshot or options.delete or options.add or options.update:
                    self.parser.print_help()
                    self.stderrMessage('No repo/kit specified.\n')
                    sys.exit(1)
               
                self.parser.print_help()
                sys.exit(1)

        else:
            if options.reponame or options.new or options.snapshot or \
               options.delete or options.add or options.update:
                self.parser.print_help()
                self.parser.error(self._('Exactly one repoman operation expected.\n'))
                sys.exit(1)

        if options.dbdriver and options.dbdriver not in ['sqlite', 'mysql']:
            self.parser.print_help()
            self.stderrMessage('Invalid database driver.\n')
            sys.exit(1)
         
    def parseArgs(self):
        (options, args) = self.parser.parse_args()
        kl.debug("options: %s", options)
        kl.debug("args: %s", args)

        self.checkArgs(options)
 
        dbdriver = 'mysql'
        dbdatabase = 'kusudb'
        dbuser = 'apache'
        dbpassword = None

        if options.dbdriver:
            dbdriver = options.dbdriver
        if options.dbdatabase:
            dbdatabase = options.dbdatabase
        if options.dbuser:
            dbuser = options.dbuser
        if options.dbpassword:
            dbpassword = options.dbpassword

        try:
            self.dbs = db.DB(dbdriver, dbdatabase, dbuser, dbpassword)
        except (UnsupportedDriverError, NoSuchDBError):
            self.parser.print_help()
            self.stderrMessage('Unable to connect to the database. Please check database configuration.\n')
            sys.exit(1)
        
        try:
            self.dbs.Repos.select()
        except:
            self.parser.print_help()
            self.stderrMessage('Unable to connect to the database. Please check database configuration.\n')
            sys.exit(1)
        
        self.kitops = KitOps()
        self.kitops.setDB(db.DB(dbdriver, dbdatabase, dbuser, dbpassword))
        
        self.lock()

        if options.prefix:
            self.prefix = path(options.prefix)
            self.rfinst = repofactory.RepoFactory(self.dbs, self.prefix, True)
        else:
            self.rfinst = repofactory.RepoFactory(self.dbs)

        if options.new:
            self.new(options.reponame)
        elif options.snapshot:
            self.snapshot(options.reponame)
        elif options.list:
            self.list()
        elif options.delete:
            self.kitarch = None
            self.kitversion = None
            if options.kitversion:
                self.kitversion = options.kitversion
            if options.kitarch:
                self.kitarch = options.kitarch
            if options.kit:
                self.kitname = options.kit
                kits = self.kitops.findKits(self.kitname, self.kitversion, self.kitarch)
                if len(kits) > 1: 
                    print "Error: There are multiple '%s' kits installed. Please specify the kit version and kit architecture."
                    self.unlock()
                    self.exit(-1)

                if kits == []:
                    print "The kit '%s' could not be found" % self.kitname
                    self.unlock()
                    sys.exit(-1)
                else:
                    self.kitversion = kits[0].version
                    self.kitarch =  kits[0].arch
                    self.delKit(options.reponame, self.kitname, self.kitversion, self.kitarch)
            elif options.kit or options.kitversion or options.kitarch:
                self.delKit(options.reponame, options.kit, options.kitversion, options.kitarch)
            elif options.reponame:
                self.delete(options.reponame)
        elif options.add:
            self.kitarch = None
            self.kitversion = None
            if options.kitversion:
                self.kitversion = options.kitversion
            if options.kitarch:
                self.kitarch = options.kitarch
            if options.kit:
                self.kitname = options.kit
                kits = self.kitops.findKits(self.kitname, self.kitversion, self.kitarch)
                if len(kits) > 1:
                    print "Error: There are multiple '%s' kits installed. Please specify the kit version and kit architecture."
                    self.unlock()
                    self.exit(-1)
           
                if kits == []:
                    print "The kit '%s' could not be found" % self.kitname
                    self.unlock()
                    sys.exit(-1)
               
                else:
                    self.kitversion = kits[0].version
                    self.kitarch = kits[0].arch
                    self.addKit(options.reponame, self.kitname, self.kitversion, self.kitarch)
            else: 
                self.addKit(options.reponame, options.kit, options.kitversion, options.kitarch)
        elif options.update:
            self.update(options.reponame)
        elif options.version:
            self.getVersion()

        self.unlock()

    def list(self):
        headers = ['Repo name', 'Repository', 'Installers', 'Ostype', 'Kits' ]

        repos = self.dbs.Repos.select()
        for repo in repos:
            print "%s:\t%s" % (headers[0], repo.reponame)
            print "%s:\t%s" % (headers[1], repo.repository)
            print "%s:\t%s" % (headers[2], repo.installers)
            print "%s:\t\t%s" % (headers[3], (repo.ostype or ''))

            kitnames = ['%s %s %s' % (kit.rname, kit.version, kit.arch) for kit in 
                       self.dbs.Repos.select_by(repoid = repo.repoid)[0].kits]

            sys.stdout.write("%s:\t\t" % headers[4])

            kitline=""
            count=0
            for kit in kitnames:
                kitline += "%s" % kit

                if kit:
                    kitline += ", "

                if (count % 2):
                    kitline +="\n\t\t"
               
                count += 1

            if kitline[-2:-1] == ',':
                kitline = kitline[:-2]

            if kitline[len(kitline)-5:-4] == ',':
                kitline = kitline[:len(kitline)-5]

            sys.stdout.write("%s" % kitline)
            print "\n"
            
if __name__ == '__main__':

    if os.getuid() != 0:
        sys.stderr.write('You need to be root to run repoman.\n')
        sys.exit(1)


    kl = kusulog.getKusuLog()
    kl.addFileHandler(os.environ['KUSU_LOGFILE'])

    app = RepoManApp() 

    if app.islock():
        sys.stderr.write('Another instance of repoman is running.\n')
        sys.stderr.write('Lock file found: %s\n' % app.getlockfile())
        sys.exit(1)
    else:
        app.run()
