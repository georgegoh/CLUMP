#!/usr/bin/env python
#
# $Id: repo.py 1732 2007-07-26 06:21:43Z ltsai $
#
# Copyright 2007 Platform Computing Inc.
#
# Licensed under GPL version 2; See LICENSE file for details.
#

from kusu.util.errors import *
from kusu.core import database as db
from kusu.core.app import KusuApp
from kusu.repoman import repofactory
from kusu.repoman import tools as repotools
from kusu.util import tools
import kusu.util.log as kusulog

from path import path
import os
import sys
from optparse import SUPPRESS_HELP

try:
    import subprocess
except:
    from popen5 import subprocess

kl = kusulog.getKusuLog()
kl.addFileHandler(path(os.environ.get('KUSU_TMP', '/tmp/kusu')) /
                       'kusu.log')

class RepoManApp(KusuApp):
    """ Application class for repoman. """

    prefix = None
 
    def __init__(self):
        """ App-specific initialization. """
        KusuApp.__init__(self)
 
        # setup command line parser
        self.parser.add_option('-n', '--new', dest='new', action="store_true")
        self.parser.add_option('-r', '--reponame', dest='reponame')
        self.parser.add_option('', '--kit', dest='kit')
        self.parser.add_option('', '--kitname', dest='kitname')
        self.parser.add_option('', '--kitversion', dest='kitversion')
        self.parser.add_option('', '--kitarch', dest='kitarch')
        self.parser.add_option('-a', '--add', dest='add', action="store_true")
        self.parser.add_option('-u', '--update', dest='update', action="store_true")
        self.parser.add_option('-l', '--list', dest='list', action="store_true")
        self.parser.add_option('-d', '--delete', dest='delete', action="store_true")
        self.parser.add_option('-s', '--snapshot', dest='snapshot', action="store_true")
        self.parser.add_option('-p', '--prefix', dest='prefix', help=SUPPRESS_HELP)
        self.parser.add_option('--dbdriver', dest='dbdriver',
                               help=self._('Database driver (sqlite, mysql)'))
        self.parser.add_option('--dbdatabase', dest='dbdatabase',
                               help=self._('Database'))
        self.parser.add_option('--dbuser', dest='dbuser',
                               help=self._('Database username'))
        self.parser.add_option('--dbpassword', dest='dbpassword',
                               help=self._('Database password'))

    def new(self, repo_name):

        repo = self.dbs.Repos.select_by(reponame=repo_name)

        if repo:
            self.stderrMessage('Repo exists.\n')
            sys.exit(1)
        
        repo = self.dbs.Repos()
        repo.reponame = repo_name

        row = self.dbs.AppGlobals.select_by(kname = 'PrimaryInstaller')[0]
        masterNode = self.dbs.Nodes.select_by(name=row.kvalue)[0]
        repo.installers = ';'.join([nic.ip for nic in masterNode.nics if nic.ip])
        
        repo.save()
        repo.flush()

        location = path('/depot/repos/%s' % repo.repoid)
        path(path(self.prefix or '/') / 'depot' / 'repos' / str(repo.repoid)).makedirs()
        repo.repository = str(location)
        
        repo.save()
        repo.flush()

        self.stdoutMessage('Repo: %s created. You can now add kits, including OS kits to the new repo.\n', repo_name)

    def addKit(self, repo_name, kname, kversion, karch):

        self.repoExists(repo_name)

        kits = self.dbs.Kits.select_by(rname = kname, version=kversion, arch=karch)

        if kits:
            kit = kits[0]

            if len(kits) > 1:
                self.stderrMessage('There is more than 1 kit.\n')
                sys.exit(1)

            else:
                repo = self.dbs.Repos.select_by(reponame = repo_name)[0]

                if kit in repo.kits:
                    self.stderrMessage('Kit has been already added.\n')
                    sys.exit(1)

                else:
                    if kit.isOS:
                        repo.ostype = '%s-%s-%s' % (kname,kversion,karch)

                    repo.kits.append(kit)
                    repo.save()
                    repo.flush()

                    self.stdoutMessage('Kit: %s %s %s added to repo: %s. Remember to refresh with -u\n', kname,kversion,karch,repo_name)
        else:
            self.stdoutMessage('No such kit.\n')
            sys.exit(1)

    def delKit(self, repo_name, kname, kversion, karch):
        self.repoExists(repo_name)

        kits = self.dbs.Kits.select_by(rname = kname, version=kversion, arch=karch)

        if kits:
            kit = kits[0]

            if len(kits) > 1:
                self.stderrMessage('There is more than 1 kit.\n')
                sys.exit(1)
            else:
                repo = self.dbs.Repos.select_by(reponame = repo_name)[0]

                if not kit in repo.kits:
                    self.stderrMessage('No such kit in repo: %s\n', repo_name)
                    sys.exit(1)
                else:
                    ngs = self.dbs.NodeGroups.select_by(repoid = repo.repoid)

                    for ng in ngs:
                        if kit in repotools.getKits(self.dbs, ng.ngname):
                            self.stdoutMessage('Kit: %s %s %s in use by nodegroup: %s\n', kname,kversion,karch, ng.ngname)
                            sys.exit(1)

                    if kit.isOS:
                        repo.ostype = None

                    repo.kits.remove(kit)
                    repo.save()
                    repo.flush()

                    self.stdoutMessage('Kit: %s %s %s removed from repo: %s. Remember to refresh with -u\n', kname,kversion,karch,repo_name)
        else:
            self.stderrMessage('No such kit.\n')
            sys.exit(1)

    def update(self, repo_name):
        self.repoExists(repo_name)

        repo = self.dbs.Repos.select_by(reponame=repo_name)[0]
        
        if len(repo.kits) == 0:
            self.stderrMessage('No OS kit added for repo: %s\n', repo_name)
            sys.exit(1)

        if True not in [kit.isOS for kit in repo.kits]:
            self.stderrMessage('No OS kit added for repo: %s\n', repo_name)
            sys.exit(1)

        self.stdoutMessage('Refreshing repo: %s This may take awhile...\n', repo_name)
        r = self.rfinst.getRepo(repo.repoid)
        r.refresh(repo.repoid)

    def delete(self, repo_name):
        self.repoExists(repo_name)
        repo = self.dbs.Repos.select_by(reponame=repo_name)
        repo = repo[0]    
        ng = self.dbs.NodeGroups.select_by(repoid = repo.repoid)

        if ng:
            self.stderrMessage('Cannot delete repo. In used by nodegroups.\n')
            sys.exit(1)
        else:
            p = path(self.prefix or '/') / 'depot' / 'repos' / str(repo.repoid)
            if p.exists(): p.rmtree()

            repo.repos = None
            repo.delete()
            repo.flush()

    def snapshot(self, repo_name):
        self.repoExists(repo_name)

        oldRepo = self.dbs.Repos.select_by(reponame=repo_name)
        oldRepo = oldRepo[0]

        newRepo = self.dbs.Repos()
        newRepo.reponame = oldRepo.reponame + '(snapshot %s)' % time.asctime() 
        newRepo.installers = oldRepo.installers
        newRepo.ostype = oldRepo.ostype
        newRepo.kits = oldRepo.kits
        newRepo.save()
        newRepo.flush()
        
        location = path('/depot/repos/%s' % newRepo.repoid)
        newRepo.repository = str(location)
        newRepo.save()
        newRepo.flush()

        src = path(self.prefix or '/') / 'depot' / 'repos' / str(oldRepo.repoid)
        dest = path(self.prefix or '/') / 'depot' / 'repos' / str(newRepo.repoid)
        tools.cpio_copytree(src, dest)

    def repoExists(self, repo_name):
        repo = self.dbs.Repos.select_by(reponame=repo_name)

        if not repo:
            self.stderrMessage('No such repo: %s\n', repo_name)
            sys.exit(1)
        else:
            return True

    def run(self):
        self.parseArgs()

    def checkArgs(self, options):
        fail = False
        for opt in ['new', 'snapshot', 'list', 'delete', 'add', 'update']:
            val = getattr(options, opt)
            if val:
                if fail:
                    self.parser.print_help()
                    sys.stderr.write('Exactly one repoman operation expected.\n')
                    sys.exit(1)

                else:
                    fail = True

        if not options.list: 
            if options.reponame:
                if options.new or options.snapshot or options.delete or options.update:
                    return

                elif options.add or options.delete:
                    if not (options.kit or options.kitname and options.kitversion and options.kitarch):
                        self.stderrMessage('No kit specified.\n')
                        sys.exit(1)

                elif not (options.new and options.snapshot and options.delete and options.add and options.update):
                    self.parser.print_help()
                    self.stderrMessage('No action specified. Requires: new | snapshot | delete | add | update\n')
                    sys.exit(1)

            else:
                if options.new or options.snapshot or options.delete or options.add or options.update:
                    self.stderrMessage('No repo specified.\n')
                    sys.exit(1)
               
                self.parser.print_help()
                sys.exit(1)

        else:
            if options.reponame or options.new or options.snapshot or options.delete or options.add or options.update:
                self.parser.print_help()
                sys.stderr.write('Exactly one repoman operation expected.\n')
                sys.exit(1)
        
    def parseArgs(self):
        (options, args) = self.parser.parse_args()
        kl.debug("options: %s", options)
        kl.debug("args: %s", args)

        self.checkArgs(options)
 
        dbdriver = 'mysql'
        dbdatabase = 'kusudb'
        dbuser = 'apache'
        dbpassword = None

        if options.dbdriver:
            dbdriver = options.dbdriver
        if options.dbdatabase:
            dbdatabase = options.dbdatabase
        if options.dbuser:
            dbuser = options.dbuser
        if options.dbpassword:
            dbpassword = options.dbpassword

        self.dbs = db.DB(dbdriver, dbdatabase, dbuser, dbpassword)

        if options.prefix:
            self.prefix = path(options.prefix)
            self.rfinst = repofactory.RepoFactory(self.dbs, self.prefix, True)
        else:
            self.rfinst = repofactory.RepoFactory(self.dbs)

        if options.new:
            self.new(options.reponame)
        elif options.snapshot:
            self.snapshot(options.new)
        elif options.list:
            self.list()
        elif options.delete:
            if options.kit:
                try:
                    kitname, kitversion, kitarch = options.kit.split('-')
                except:
                    self.stderrMessage('Invalid kit.\n')
                    sys.exit(1)

                self.delKit(options.reponame, kitname, kitversion, kitarch)
            elif options.kitname or options.kitversion or options.kitarch:
                self.delKit(options.reponame, options.kitname, options.kitversion, options.kitarch)
            elif options.reponame:
                self.delete(options.reponame)
        elif options.add:
            if options.kit:
                try:
                    kitname, kitversion, kitarch = options.kit.split('-')
                except:
                    self.stderrMessage('Invalid kit.\n')
                    sys.exit(1)

                self.addKit(options.reponame, kitname, kitversion, kitarch)
            else: 
                self.addKit(options.reponame, options.kitname, options.kitversion, options.kitarch)
        elif options.update:
            self.update(options.reponame)

    def list(self):
        headers = ['Repo name', 'Repository', 'Installers', 'Ostype', 'Kits' ]

        max_lengths = []
        for x in xrange(len(headers)):
            max_lengths.append(len(headers[x]))

        repos = self.dbs.Repos.select()
        repolines = []
        for repo in repos:
            repoline = []

            repoline.append(repo.reponame)
            repoline.append(repo.repository)
            repoline.append(repo.installers)
            repoline.append(repo.ostype or '')

            # update maximum lengths
            for x in xrange(len(repoline)):
                linelengths = [len(l) for l in repoline[x].split('\n')]
                if max(linelengths) > max_lengths[x]:
                    max_lengths[x] = max(linelengths)

            kitnames = ['%s %s %s' % (kit.rname, kit.version, kit.arch) for kit in 
                       self.dbs.Repos.select_by(repoid = repo.repoid)[0].kits]
            repoline.append('\n'.join(kitnames))

            kitlengths = [len(kitnames) for kitnames in kitnames]
            if kitlengths and max(kitlengths) > max_lengths[-1]:
                max_lengths[-1] = max(kitlengths)
            
            repolines.append(repoline)

        self.printTable(headers, repolines, max_lengths)

    def printTable(self, titles, entries, widths):
        horline = '+'
        for width in widths:
            horline += '-' * (width + 2) + '+'

        print horline

        line = '|'
        for x in xrange(len(titles)):
            line += ' ' + titles[x].ljust(widths[x]) + ' |'

        print line
        print horline

        for entry in entries:
            newlines = True
            while newlines:
                newlines = False

                line = '|'
                for x in xrange(len(entry)):
                    newline = entry[x].find('\n')
                    if newline == -1:
                        thisentry = entry[x]
                        nextentry = ''
                    else:
                        newlines = True
                        thisentry = entry[x][:newline]
                        nextentry = entry[x][newline + 1:]

                    line += ' ' + thisentry.ljust(widths[x]) + ' |'
                    entry[x] = nextentry

                print line

        print horline



if __name__ == '__main__':
    
    app = RepoManApp() 
    app.run()
