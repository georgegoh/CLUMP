#!/usr/bin/env python
# $Id$
#
# Copyright 2007 Platform Computing Corporation.
#
# Licensed under GPL version 2; See LICENSE for details.
#

import sys
import os
import subprocess
from kusu.core.app import KusuApp
from path import path
from kusu.boot.distro import SUPPORTED_ARCH, SUPPORTED_DISTROS
from kusu.boot.tool import BootMediaTool
from kusu.boot.image import checkAllToolsDeps
from kusu.util.errors import *
        
        
class BootMediaApp(KusuApp):
    """ Application class for boot-media-tool. """
    
    def __init__(self, bminst):
        """ App-specific initialization. """
        KusuApp.__init__(self)
        
        self.actions = {'query':['source'], 
            'make-iso':['patch','iso','source','kususrc','arch'],
            'make-patch':['os','version','patch','kususrc','arch'],
            'make-ni-patch':['os','version','patch','kususrc','arch']}
        
        # self.action and self.actionargs will hold the current action and its arguments            
        self.action = None 
        self.actionargs = None
        
        # an instance of the BootMediaTool for managing the actions        
        self.bminst = bminst
        self.usagestr = self._("""\
boot-media-tool [-h|-v] <action> arg1=val1 arg2=val2 ...

boot-media-tool builds Kusu Boot Media from supported Linux distros' 
installation sources. The tool also queries and extracts kernel/initrd 
images from these sources.

actions:

    query           - Probes and displays any kernel/initrd in the 
                      installation source. Available arguments for 
                      this action: 
                        source=<path of installation source>

    make-iso        - Make the Kusu Boot Media iso. Available arguments 
                      for this action:
                        patch=<path of installer patchfile>
                        iso=<name of iso file>
                        arch=<architechure of OS>
                        source=<path of installation source>
                        kususrc=<directory containing Kusu Trunk>
                        
    make-patch      - Make the installer patchfile from the Kusu Trunk SVN 
                      source. Available arguments for this action:
                        kususrc=<directory containing Kusu Trunk>
                        os=<name of OS>
                        version=<version of OS>
                        arch=<architechure of OS>
                        patch=<name of installer patchfile>

    make-ni-patch   - Make the nodeinstaller patchfile from the Kusu Trunk 
                      SVN source. Available arguments for this action:
                        kususrc=<directory containing Kusu Trunk>
                        os=<name of OS>
                        version=<version of OS>
                        arch=<architechure of OS>
                        patch=<name of nodeinstaller patchfile>
                        
""")
        self.examples = self._("""\
Example operation usages:

    To query installation source mounted at /media/cdrom:
    # boot-media-tool query source=/media/cdrom

    To create the Kusu Installer patchfile for Fedora 6 i386
    # boot-media-tool make-patch os=fedora version=6 arch=i386
    patch=updates.img kususrc=/tmp/svn/kusu/trunk

    To create the Kusu Boot Media iso for Fedora 6 i386:
    # boot-media-tool make-iso patch=updates.img iso=kusu.iso 
    arch=i386 source=/mnt/cdrom kususrc=/tmp/svn/kusu/trunk
    
""")
        self.parser.set_usage(self.usagestr)
        
    def printUsageExit(self):
        """ Print usage text and exit. """
        self.stdoutMessage(self.usagestr)
        sys.stdout.write(os.linesep)
        sys.exit(0)
        
    def printExamplesExit(self):
        """ Print examples text and exit. """
        self.stdoutMessage(self.examples)
        sys.exit(0)
        
    def printMsgExit(self, msg):
        """ Print msg and exit. """
        self.stdoutMessage(msg)
        sys.stdout.write(os.linesep)
        sys.exit(1)
        
        
    def handleArgPairs(self, arglist):
        """ Handle the argument list and return a dict of key-value pairs. """
        
        li = []
        d = {}
        
        for s in arglist:
            li2 = s.split('=')
            for s2 in li2: 
                if s2: li.append(s2)        

        # There should be even number of items in order to make pairs
        if not len(li) % 2: 
            # Collect the pairs
            while li:
                d[li[0].lower()] = li[1]
                del li[0:2]
        
        return d

    def parseargs(self):
        """ App-specific arguments goes here. """
        
        self.parser.add_option('-f','--force', action='store_true', dest='overwrite')
        self.parser.add_option('-H','--examples', action='store_true', dest='showexamples')
        self.parser.add_option('-s','--script', action='store_true', dest='usescript')
        self.options, self.args = self.parser.parse_args()
        

        if self.options.showexamples:
            self.printExamplesExit()

        if self.options.usescript and len(self.args) == 1:
            # check if the first parsed argument is a scriptfile
            scriptfile = self._checkscript(self.args[0])
            if scriptfile:
                self._runscript(scriptfile)
            else:
                msg = self._('Invalid Script!')
                self.printMsgExit(msg)
        
        if len(self.args) < 2:
            self.printUsageExit()
            
            
        # check if the first parsed argument is a supported action
        action = self.args[0]
        
        
        if action not in self.actions.keys():
            self.printUsageExit()
        d = self.handleArgPairs(self.args[1:])
        
        if not d:
            self.printUsageExit()
            
        # iterate keys in d and validate against the commands'
        # list of keys
        for k in d.keys():
            if k not in self.actions[action]:
                self.printUsageExit()
                
        self.action = action
        self.actionargs = d
        
    def checkRequirements(self):
        """ Check if the list of tools needed by BMT are indeed available. """
        
        try:
            checkAllToolsDeps()
        except ToolNotFound, tool:
            msg = self._('%(toolname)s not in your PATH. Please ensure that it is installed and available.' \
                    % {'toolname':tool})
            self.printMsgExit(msg)
        
    def run(self):
        """ Main launcher. """
        self.parseargs()
        self.checkRequirements()
        
        # call the correct sub-handler for the action
        m = '_' + self.action.split('-')[0] \
            + ''.join([l.capitalize() for l in self.action.split('-')[1:]])
            
        handler = getattr(self,m)
        
        handler(self.actionargs)
        
        sys.exit(0)
        
    def _checkscript(self,scriptfile):
        """ Validates the Boot Media Tool script. """
        return None
        
    def _runscript(self,scriptfile):
        """ Run the actions listed in the Boot Media Tool in batch-mode. """
        sys.exit(0)
    
    def _query(self,args):
        """Handler for query action. args is a dict of supported key-value pairs for this action. """
        srcpath = path(args['source'])
        if not self.bminst.validSrcPath(srcpath):
            distros = ', '.join(SUPPORTED_DISTROS)
            msg = self._('The path %(srcpath)s is not a supported installation source. Supported distros are %(distros)s.' \
                % {'srcpath':srcpath,'distros':distros})
            self.printMsgExit(msg)
            
        distro = self.bminst.getDistro(srcpath)
        version = self.bminst.getVersion(srcpath)
        kernpath = self.bminst.getKernelPath(srcpath)
        initrdpath = self.bminst.getInitrdPath(srcpath)
        isolinuxpath = self.bminst.getIsolinuxbinPath(srcpath)
        
        if distro:
            print self._('OS Type:'), distro
        else:
            print self._('Cannot determine OS type.')

        if version:
            print self._('Major Version:'), version
        else:
            print self._('Cannot determine major version.')

        if kernpath:
            print self._('Kernel found:'), kernpath
        else:
            print self._('Cannot find kernel.')

        if initrdpath:
            print self._('Initrd found:'), initrdpath
        else:
            print self._('Cannot find initrd.')
            
        if initrdpath:
            print self._('Isolinux.bin found:'), isolinuxpath
        else:
            print self._('Cannot find Isolinunx.bin.')
                
    def _makeIso(self,args):
        """Handler for make-iso. args is a dict of supported key-value pairs for this action. """
        patchfile = args.get('patch',None)
        iso = path(args['iso']).abspath()
        arch = args.get('arch',None)
        srcpath = path(args['source']).abspath()
        kususrc = path(args['kususrc']).abspath()
        tmpdir = None
        
        if not arch:
            msg = self._('Please supply the arch= option!')
            self.printMsgExit(msg)
        
        if arch not in SUPPORTED_ARCH:
            arches = ', '.join(SUPPORTED_ARCH)
            msg = self._('%(arch)s architechure not supported. Supported architechures are %(arches)s' \
                % {'arch':arch,'arches':arches})
            self.printMsgExit(msg)
        
        if patchfile: patchfile = path(patchfile).abspath()
                  
        try:
            print self._('Creating temporary iso contents based on installation source and Kusu SVN source tree.')
            print self._('This may take awhile...')
            tmpdir = self.bminst.mkISOFromSource(srcpath,patchfile,kususrc,arch)
            print self._('Generating Kusu Boot Media ISO.')
            self.bminst.mkBootISO(tmpdir, iso, volname="Kusu Boot Media")
            print self._('Generated %(iso)s') % {'iso':iso}
            # do housecleaning
            if tmpdir.exists(): tmpdir.rmtree()
        except FilePathError:
            if not tmpdir:
                pass
            elif tmpdir.exists(): 
                tmpdir.rmtree()
            msg = self._('File path error. Please ensure the directory path is valid.')
            self.printMsgExit(msg)     
        except InvalidInstallSource:
            if not tmpdir:
                pass
            elif tmpdir.exists(): 
                tmpdir.rmtree()
            msg = self._('Invalid Installation source!') 
            self.printMsgExit(msg) 
        except InvalidKusuSource:
            if not tmpdir:
                pass
            elif tmpdir.exists(): 
                tmpdir.rmtree()
            msg = self._('Invalid Kusu SVN source!') 
            self.printMsgExit(msg)
        except UnsupportedDistro:
            if not tmpdir:
                pass
            elif tmpdir.exists(): 
                tmpdir.rmtree()
            msg = self._('Distro-specific assets not found in Kusu SVN source!') 
            self.printMsgExit(msg)
            
    def _makePatch(self, args):
        """Handler for make-patch. args is a dict of supported key-value pairs for this action. """
        kususrc = path(args['kususrc'])
        osname = args['os']
        version = args['version']
        osarch = args['arch']
        patchfile = args['patch']
        
        if osname not in SUPPORTED_DISTROS:
            distros = ', '.join(SUPPORTED_DISTROS)
            msg = self._('%(osname)s is not one of the supported distros. Supported distros are %(distros)s.' \
                % {'osname':osname, 'distros':distros})
            self.printMsgExit(msg)
        
        # we're only interested in the major version
        osver = version.split('.')[0]
        
        try:
            print self._('Creating Kusu Installer patchfile for %(osname)s %(osver)s %(osarch)s. This may take awhile.' \
                % {'osname':osname,'osver':osver,'osarch':osarch})
            self.bminst.mkPatch(kususrc,osname,osver,osarch,patchfile)
            print self._('Finished creating %(patchfile)s' % {'patchfile':patchfile})
        except (FilePathError,InvalidKusuSource):
            msg = self._('File path error. Please ensure the paths for the kususrc and patchfile are valid.')
            self.printMsgExit(msg)
        except NotPriviledgedUser:
            msg = self._('This operation requires root access.')
            self.printMsgExit(msg)
        except UnsupportedDistro:
            msg = self._('Distro-specific assets not found in Kusu SVN source!')
            self.printMsgExit(msg)
        except (FailedBuildMake,FailedBuildCMake), e:
            msg = self._('Failed building the Kusu Runtime. Please file a bug!')
            self.printMsgExit(msg)

    def _makeNiPatch(self, args):
        """Handler for make-ni-patch. args is a dict of supported key-value pairs for this action. """
        kususrc = path(args['kususrc'])
        osname = args['os']
        version = args['version']
        osarch = args['arch']
        patchfile = args['patch']

        if osname not in SUPPORTED_DISTROS:
            distros = ', '.join(SUPPORTED_DISTROS)
            msg = self._('%(osname)s is not one of the supported distros. Supported distros are %(distros)s.' \
                % {'osname':osname, 'distros':distros})
            self.printMsgExit(msg)

        # we're only interested in the major version
        osver = version.split('.')[0]

        try:
            print self._('Creating Kusu NodeInstaller patchfile for %(osname)s %(osver)s %(osarch)s. This may take awhile.' \
                % {'osname':osname,'osver':osver,'osarch':osarch})
            self.bminst.mkNodeInstallerPatch(kususrc,osname,osver,osarch,patchfile)
            print self._('Finished creating %(patchfile)s' % {'patchfile':patchfile})
        except (FilePathError,InvalidKusuSource):
            msg = self._('File path error. Please ensure the paths for the kususrc and patchfile are valid.')
            self.printMsgExit(msg)
        except NotPriviledgedUser:
            msg = self._('This operation requires root access.')
            self.printMsgExit(msg)
        except UnsupportedDistro:
            msg = self._('Distro-specific assets not found in Kusu SVN source!')
            self.printMsgExit(msg)
        except (FailedBuildMake,FailedBuildCMake), e:
            msg = self._('Failed building the Kusu Runtime. Please file a bug!')
            self.printMsgExit(msg)

        

if __name__ == '__main__':
    bminst = BootMediaTool()
    app = BootMediaApp(bminst)
    app.run()


