#!/usr/bin/env python
# $Id$
#
# Copyright 2007 Platform Computing Corporation.
#
# Licensed under GPL version 2; See LICENSE for details.

import sys
import os
import kusu.util.log as kusulog
from kusu.core.app import KusuApp
from kusu.nodeinstaller import NodeInstaller

class NodeInstallerApp(KusuApp):
    
    def __init__(self):
        KusuApp.__init__(self)

        self.actions = {'provision':['niihost'], 
            'get-nii':['nodename','nodeip','niihost']}
        
        self.nodeinst = NodeInstaller()
        
        # self.action and self.actionargs will hold the current action and its arguments            
        self.action = None 
        self.actionargs = None

        self.usagestr = """\
nodeinstaller <action> arg1=val1 arg2=val2 ...

nodeinstaller is the automated version of the Kusu Installer. This
application is not meant to be run as a standalone application.

When run with no actions, nodeinstaller will attempt to automatically
run in provisioning mode.


actions:

    provision   - Starts the automatic installer for provisioning a node. 
                  Available arguments for this action:
                    niihost=<NII Server Address>
                                        
    get-nii     - Prints the Node Installation Information for a
                  nodename or nodeip to standard output. Available 
                  arguments for this action:
                    niihost=<NII Server Address>
                    nodename=<Name of a Node>
                    nodeip=<IP Address of a Node>

"""
        self.parser.set_usage(self.usagestr)

    def printUsageExit(self):
        """ Print usage text and exit. """
        self.stdoutMessage(self.usagestr)
        sys.stdout.write(os.linesep)
        sys.exit(0)

    def printMsgExit(self, msg):
        """ Print msg and exit. """
        self.stdoutMessage(msg)
        sys.stdout.write(os.linesep)
        sys.exit(1)

    def handleArgPairs(self, arglist):
        """ Handle the argument list and return a dict of key-value pairs. """

        li = []
        d = {}

        for s in arglist:
            li2 = s.split('=')
            for s2 in li2: 
                if s2: li.append(s2)        

        # There should be even number of items in order to make pairs
        if not len(li) % 2: 
            # Collect the pairs
            while li:
                d[li[0].lower()] = li[1]
                del li[0:2]

        return d

    def parseargs(self):
        """ App-specific arguments goes here. """

        self.options, self.args = self.parser.parse_args()

        if not self.args :
            # run in provision mode
            self.kl.debug('Running in automatic provision mode')
            self.args.append('provision')
            
            # grab the /proc/cmdline and look for niihost
            cmdline = open('/proc/cmdline').read()
            cmdlist = cmdline.strip('\n').split()
            for l in cmdlist:
                if l.startswith('niihost='):
                    self.args.append(l)

        # check if the first parsed argument is a supported action
        action = self.args[0]

        if action not in self.actions.keys():
            self.printUsageExit()
        d = self.handleArgPairs(self.args[1:])

        if not d:
            self.printUsageExit()

        # iterate keys in d and validate against the commands'
        # list of keys
        for k in d.keys():
            if k not in self.actions[action]:
                self.printUsageExit()

        self.action = action
        self.actionargs = d
     
    def setupLog(self):
        # setting up logger
        self.kl = kusulog.getKusuLog('nodeinstaller')
        self.kl.addFileHandler()

     
    def run(self):
        """ Main launcher. """
        self.setupLog()
        self.parseargs()

        self.kl.debug('Starting nodeinstaller')
    
        # call the correct sub-handler for the action
        m = '_' + self.action.split('-')[0] \
            + ''.join([l.capitalize() for l in self.action.split('-')[1:]])
            
        handler = getattr(self,m)
        
        handler(self.actionargs)
    
    
        self.kl.debug('Stopping nodeinstaller')
        kusulog.shutdown()        
        sys.exit(0)

    def _provision(self, args):
        """Handler for provision. args is a dict of supported key-value pairs for this action. """
        niihost = args.get('niihost',None)

        if not niihost: return
        
        self.kl.debug('niihost: %s' % niihost)


    def _getNii(self, args):
        """Handler for get-nii. args is a dict of supported key-value pairs for this action. """
        niihost = args.get('niihost',None)
        nodename = args.get('nodename',None)
        nodeip = args.get('nodeip',None)
        
        if not niihost:
            msg = self._('Please specify a NII Host server.')
            self.printMsgExit(msg)
            
        if not nodename or not nodeip:
            msg = self._('Please specify a node name or node ip address.')
            self.printMsgExit(msg)
            
        if nodename and nodeip:
            msg = self._('Please specify only node name OR node ip address.')
            self.printMsgExit(msg)
            
        nii = self.nodeinst.retrieveNII(niihost=niihost,nodename=nodename,nodeip=nodeip)
        print nii
            


if __name__ == '__main__':
    app = NodeInstallerApp()
    app.run()

