#!/usr/bin/env python
# $Id$
#
# Copyright 2007 Platform Computing Inc.
#
# Licensed under GPL version 2; See LICENSE for details.

import sys
import os
import re
import StringIO
import kusu.util.log as kusulog
# Sets up kusu logging
kl = kusulog.getKusuLog()
kl.addFileHandler()

from kusu.core.app import KusuApp
from kusu.util.errors import *
from kusu.util import compat
from kusu.nodeinstaller import NodeInstaller, retrieveNII
from kusu.boot.tool import getPartitionMap, makeDev
from kusu.ui.text.screenfactory import *
from kusu.ui.text.navigator import Navigator
from kusu.partitiontool.nodes import checkAndMakeNode

class NodeInstallerApp(KusuApp):
    
    def __init__(self):
        KusuApp.__init__(self)

        self.actions = {'provision':['niihost'], 
            'get-nii':['niihost','node']}
        
        self.nodeinst = NodeInstaller()
        
        # self.action and self.actionargs will hold the current action and its arguments            
        self.action = None 
        self.actionargs = None

        self.usagestr = """\
nodeinstaller <action> arg1=val1 arg2=val2 ...

nodeinstaller is the automated version of the Kusu Installer. This
application is not meant to be run as a standalone application.

When run with no actions, nodeinstaller will attempt to automatically
run in provisioning mode.


actions:

    provision   - Starts the automatic installer for provisioning a node. 
                  Available arguments for this action:
                    niihost=<NII Server Address>
                                        
    get-nii     - Prints the Node Installation Information for a node to 
                  standard output. Available arguments for this action:
                    niihost=<NII Server Address>
                    node=<Name or IP Address of a Node>

"""
        self.parser.set_usage(self.usagestr)

    def printUsageExit(self):
        """ Print usage text and exit. """
        self.stdoutMessage(self.usagestr)
        sys.stdout.write(os.linesep)
        sys.exit(0)

    def printMsgExit(self, msg):
        """ Print msg and exit. """
        self.stdoutMessage(msg)
        sys.stdout.write(os.linesep)
        sys.exit(1)

    def handleArgPairs(self, arglist):
        """ Handle the argument list and return a dict of key-value pairs. """

        li = []
        d = {}

        for s in arglist:
            li2 = s.split('=')
            for s2 in li2: 
                if s2: li.append(s2)        

        # There should be even number of items in order to make pairs
        if not len(li) % 2: 
            # Collect the pairs
            while li:
                d[li[0].lower()] = li[1]
                del li[0:2]

        return d

    def parseargs(self):
        """ App-specific arguments goes here. """

        self.options, self.args = self.parser.parse_args()

        if not self.args :
            # run in provision mode
            kl.debug('Running in automatic provision mode')
            self.args.append('provision')
            
            # grab the /proc/cmdline and look for niihost
            cmdline = open('/proc/cmdline').read()
            cmdlist = cmdline.strip('\n').split()
            for l in cmdlist:
                if l.startswith('niihost='):
                    self.args.append(l)

        # check if the first parsed argument is a supported action
        action = self.args[0]

        if action not in self.actions.keys():
            self.printUsageExit()
        d = self.handleArgPairs(self.args[1:])

        if not d:
            self.printUsageExit()

        # iterate keys in d and validate against the commands'
        # list of keys
        for k in d.keys():
            if k not in self.actions[action]:
                self.printUsageExit()

        self.action = action
        self.actionargs = d
     
    def run(self):
        """ Main launcher. """
        kl.debug('Starting nodeinstaller')
        
        self.parseargs()
        
        # call the correct sub-handler for the action
        m = '_' + self.action.split('-')[0] \
            + ''.join([l.capitalize() for l in self.action.split('-')[1:]])
            
        handler = getattr(self,m)
        
        handler(self.actionargs)
        kl.debug('Finishing launcher')
    
        sys.exit(0)

    def _provision(self, args):
        """Handler for provision. args is a dict of supported key-value pairs for this action. """
        niihost = args.get('niihost',None)
        kl.addSysLogHandler(host=niihost)

        import kusu.hardware.probe
        disks_dict = kusu.hardware.probe.getDisks()
        disks_str = disks_dict.keys()
        for d in disks_dict.values():
            disks_str += d['partitions']
        disks_str += kusu.hardware.probe.getCDROM().keys()

        for dev in disks_str:
            checkAndMakeNode('/dev/' + dev)

        if not niihost: sys.exit(2)
        ksfile = '/tmp/kusu/ks.cfg'
        class NIIScreenFactory(ScreenFactory):
            name = 'nodeinstaller'
            ScreenFactory.screens = [ProgressScreen(niihost, ksfile)]
        feedback = Navigator(screenFactory=NIIScreenFactory, screenTitle='Installing Node',
                             showTrail=True, showNavButtons=False)
        try:
            return_code = feedback.run()
        except UserExitError, e:
            return
        except Exception, e:
            exceptionHandler(e)


    def _getNii(self, args):
        """Handler for get-nii. args is a dict of supported key-value pairs for this action. """
        niihost = args.get('niihost',None)
        node = args.get('node',None)
        
        kl.debug('niihost : %s' % niihost)
        kl.debug('node : %s' % node)        
        if not niihost:
            msg = self._('Please specify a NII Host server.')
            self.printMsgExit(msg)
            
        if not node:
            msg = self._('Please specify a node name or node ip address.')
            self.printMsgExit(msg)
                  
        nii = retrieveNII(niihost)
        if nii: print nii

def exceptionHandler(error):
    kl.debug('General Exception caught')
    import traceback

    if hasattr(traceback, "format_exc"): # new in python 2.4
        tb = traceback.format_exc()
    else:
        fp = StringIO.StringIO()
        traceback.print_exc(file=fp)
        tb = fp.getvalue()

    kl.debug(tb)
    sys.exit(1)

import snack
from kusu.util.errors import UserExitError
class ProgressScreen(BaseScreen):

    def __init__(self, niihost, ksfile):
        BaseScreen.__init__(self)
        kl.debug('niihost: %s' % niihost)
        self.niihost = niihost
        self.ksfile = ksfile

    def displayDiskProfileState(self, diskprofile):
        s = str(diskprofile) + '\n\n'
        s = s + 'LVM Fifo:\n'
        s = s + diskprofile.reprLVMFifo()
        self.selector.popupMsg('Internal Partitiontool State', s, width=60)
        return NAV_NOTHING

    def drawImpl(self):
        kl.debug('Downloading NII..')
        dlg = self.selector.popupProgress('Node Install Info', 'Downloading Node install info...')
        self.niisource = retrieveNII(self.niihost)
        self.nodeinst = NodeInstaller(self.niisource)
        dlg.close()

        kl.debug('Writing profile into kickstart file /tmp/kusu/ks.cfg.')
        dlg = self.selector.popupProgress('Preparing Kickstart', 'Preparing Kickstart files...')
        self.nodeinst.setup(self.ksfile, self.niihost)
        dlg.close()

        kl.debug('Setting timezone')
        dlg = self.selector.popupProgress('Setting Timezone', 'Setting the timezone...')
        self.nodeinst.setTimezone()
        dlg.close()
 
        kl.debug('Committing disk profile')
        dlg = self.selector.popupProgress('Partitioning Disks', 'Initializing disks...')
#        self.displayDiskProfileState(self.nodeinst.ksprofile.diskprofile)
        self.nodeinst.commit()
        dlg.close()
#        self.selector.popupMsg('Partitioning', 'Finished Partitioning disks.')
        kl.debug('Finished partitioning disks')

        kusu_prefix = '/mnt/kusu'

        kl.debug('Mounting filesystem')
        dlg = self.selector.popupProgress('Mounting Filesystem', 'Mounting filesystem...')
        self.nodeinst.mountKusuMntPts(kusu_prefix)
        dlg.close()

        kl.debug('Copying public keys')
        dlg = self.selector.popupProgress('SSH Public Keys', 'Downloading SSH public keys...')
        self.nodeinst.getSSHPublicKeys(self.niihost, kusu_prefix)
        dlg.close()
        
        kl.debug('Generating /etc/profile.nii')
        dlg = self.selector.popupProgress('Setting profile.nii', 'Generating file...')
        self.nodeinst.generateProfileNII(kusu_prefix)
        dlg.close()

        kl.debug('Copying /opt/kusu/etc/db.passwd')
        dlg = self.selector.popupProgress('Db Passwd', 'Copying db.passwd...')
        self.nodeinst.getDbPasswd(kusu_prefix)
        dlg.close()

        kl.debug('Downloading custom scripts')
        dlg = self.selector.popupProgress('Downloading custom scripts',
                                          'Downloading custom scripts')
        self.nodeinst.download_scripts(self.niihost, prefix=kusu_prefix)
        dlg.close()

        kl.debug('Copying out kusu.log and ks.cfg to /root')
        dlg = self.selector.popupProgress('Backup log and config',
                                          'Copying out kusu.log and ' + \
                                          'ks.cfg to /root')
        self.nodeinst.saveLogs(destdir='/mnt/kusu/root', prefix='/tmp/kusu')
        dlg.close()
        raise UserExitError

if __name__ == '__main__':
    # set up tty3 for logging output
    if os.access("/dev/tty3", os.W_OK):
        kl.addFileHandler('/dev/tty3')

    app = NodeInstallerApp()
    app.run()

