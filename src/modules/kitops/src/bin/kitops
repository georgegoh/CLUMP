#!/usr/bin/env python
# $Id$
#
# Copyright 2007 Platform Computing Corporation.
#
# Licensed under GPL version 2; See LICENSE for details.
#

import sys
import os
import string
from path import path

import kusu.util.log as kusulog
kl = kusulog.getKusuLog()
kl.addFileHandler(path(os.environ.get('KUSU_TMP', '/tmp/kusu')) /
                       'kusu-kitops.log')
kl = kusulog.getKusuLog('kitops-app')

from kusu.core.app import KusuApp
from kusu.kitops.kitops import KitOps
from kusu.boot.distro import DistroInstallSrcBase
import kusu.core.database as db

KITOP_NONE  = 0x00
KITOP_ADD   = 0x01
KITOP_DEL   = 0x02
KITOP_UP    = 0x04
KITOP_LST   = 0x08

class KitOpsApp(KusuApp):
    def __init__(self, koinst):
        """Create instance of KitOpsApp. koinst is a KitOps instance."""

        KusuApp.__init__(self)

        self.koinst = koinst

        self.kitop = KITOP_NONE

        # setup command line parser
        self.parser.add_option('-a', '--add', dest='addkit',
                               help=self._('kitops_usage_add'), 
                               action='callback', callback=self.optargs)
        self.parser.add_option('-m', dest='media',
                               help=self._('kitops_usage_media'))
        self.parser.add_option('-l', '--list', dest='lstkit',
                               help=self._('kitops_usage_list'),
                               action='callback',callback=self.optargs )
        self.parser.add_option('-e', '--remove', dest='delkit',
                               help=self._('kitops_usage_remove'))
        self.parser.add_option('-p', '--prefix', dest='prefix',
                               help=self._('Directory to place /depot in'))
        self.parser.add_option('--dbdriver', dest='dbdriver',
                               help=self._('Database driver (sqlite, mysql)'))
        self.parser.add_option('--dbdatabase', dest='dbdatabase',
                               help=self._('Database'))
        self.parser.add_option('--dbuser', dest='dbuser',
                               help=self._('Database username'))
        self.parser.add_option('--dbpassword', dest='dbpassword',
                               help=self._('Database password'))

    def nxor(*args):
        '''N-way XOR for an  arbitrary number of bool args'''
        return len([x for x in args if x]) == 1
    nxor = staticmethod(nxor)
        
    def parseArgs(self):
        (options, args) = self.parser.parse_args()
        kl.debug("options: %s", options)
        kl.debug("args: %s", args)

        if args:
            kl.critical("No more arguments expected. Remaining args: %s" % args)
            self.printHelp()
            sys.exit(1)

        if options.addkit == '':
            addbool = True  #want to resolve '' to true
        else:
            addbool = bool(options.addkit)

        if options.lstkit == '':
            lstbool = True  #want to resolve '' to true
        else:
            lstbool = bool(options.lstkit)

        #must specify exactly one of the following (want rv==true)
        rv = KitOpsApp.nxor(addbool, bool(options.delkit), lstbool)
        if not rv:
            sys.stderr.write('kitops: Exactly one kit operation expected\n')
            self.printHelp()
            sys.exit(1)

        if addbool:
            koinst.setKitname(options.addkit)
            koinst.setKitmedia(options.media)
            self.kitop = KITOP_ADD
        elif options.delkit:
            koinst.setKitname(options.delkit)
            self.kitop = KITOP_DEL
        elif lstbool:
            koinst.setKitname(options.lstkit)
            self.kitop = KITOP_LST

        dbdriver = 'mysql'
        dbdatabase = 'kusudb'
        dbuser = 'apache'
        dbpassword = None

        if options.dbdriver:
            dbdriver = options.dbdriver
        if options.dbdatabase:
            dbdatabase = options.dbdatabase
        if options.dbuser:
            dbuser = options.dbuser
        if options.dbpassword:
            dbpassword = options.dbpassword

        self.koinst.setDB(db.DB(dbdriver, dbdatabase, dbuser, dbpassword))

        if options.prefix:
            kl.debug('Setting prefix to %s', options.prefix)
            self.koinst.setPrefix(options.prefix)

    def run(self):
        '''The main body of the application.  '''

        self.parseArgs()
        
        if self.kitop == KITOP_ADD:
            self.runAdd()

        elif self.kitop == KITOP_DEL:
            kl.debug('Performing delete operation')
            rv = self.koinst.deleteKit()
            if not rv:
                kl.debug('SUCCESS performing delete operation')
            else:
                kl.debug('FAIL performing delete operation')

        elif self.kitop == KITOP_LST:
            self.runListKit()

        else:
            kl.debug('Unknown operation requested: %d', self.kitop)

    def runAdd(self):
        kl.debug('Performing add operation')
        if self.koinst.addKitPrepare() != 0:
            kl.debug('FAIL add preparation; see above fore more info')
            sys.exit(1)

        media_distro = self.koinst.getOSDist()
        if not media_distro.ostype:
            # we cannot identify the distro -- treat as ordinary kit
            rv = self.koinst.addKit()
        else:
            rv = self.runAddOSKit(media_distro)

        if not rv:
            kl.debug('SUCCESS performing add operation')
        else:
            kl.debug('FAIL performing add operation')

        self.koinst.unmountMedia()

    def runAddOSKit(self, osdistro):
        rv, kit, osdistro = self.koinst.prepareOSKit(osdistro)

        if rv:  # we have a non-zero return code
            return rv

        res = ''
        while 1:    #loop to go through all the media disks...
            rv = self.koinst.copyOSKitMedia(kit, osdistro, res)
            if rv:
                return rv

            while not (res.lower() == 'y' or res == 'N'):
                res = raw_input('Any more disks for this OS kit? [y/N] ')

            if res == 'N':
                break

            print "Please insert next disk if installing from phys. media NOW"
            res = raw_input('(URI for next ISO | blank if phys. media | N to finish): ')
            res = string.strip(res)
            if res == 'N':
                break
      
        return self.koinst.finalizeOSKit(kit)

    def runListKit(self):
            kl.debug('Performing list operation')

            kits = self.koinst.listKit()

            if kits:
                print 'Kit'.ljust(16) + 'Description'.ljust(27) + \
                      'Version'.ljust(8) + 'Architecture'.ljust(13) + \
                      'OS Kit'.ljust(7) + 'Removable'.ljust(9)

                for kit in kits:
                    kit_name = ' ' + kit.rname
                    kit_desc = ' ' + kit.rdesc
                    kit_version = ' ' + kit.version

                    kit_arch = ' noarch'
                    if kit.arch:
                        kit_arch = kit.arch

                    kit_isOS = ' No'
                    if kit.isOS:
                        kit_isOS = ' Yes'

                    kit_removable = ' No'
                    if kit.removable:
                        kit_removable = ' Yes'

                    print kit_name.ljust(16) + kit_desc.ljust(27) + \
                          kit_version.ljust(8) + kit_arch.ljust(13) + \
                          kit_isOS.ljust(7) + kit_removable.ljust(9)

            kl.debug('SUCCESS performing list operation')

    def printHelp(self):
        self.parser.print_help()

if __name__ == '__main__':
    koinst = KitOps()
    app = KitOpsApp(koinst)
    app.run()
