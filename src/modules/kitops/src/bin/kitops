#!/usr/bin/env python
# $Id$
#
# Copyright 2007 Platform Computing Inc.
#
# Licensed under GPL version 2; See LICENSE for details.
#

import sys
import os
import string
from path import path
from optparse import SUPPRESS_HELP

import kusu.util.log as kusulog
kl = kusulog.getKusuLog()
kl.addFileHandler(path(os.environ.get('KUSU_TMP', '/tmp/kusu')) /
                       'kusu-kitops.log')
kl = kusulog.getKusuLog('kitops-app')

import kusu.core.database as db
from kusu.core.app import KusuApp
from kusu.kitops.kitops import KitOps
from kusu.boot.distro import DistroInstallSrcBase
from kusu.util.errors import *

EMOUNT_FAIL     = -1
EKITLOC_FAIL    = -2
EKITADD_FAIL    = -3
EKITDEL_FAIL    = -4
EKITUP_FAIL     = -5
EKITLST_FAIL    = -6
EDB_FAIL        = -7
EKIT_BAD        = -8
EBAD_OP         = -9

KITOP_NONE  = 0x00
KITOP_ADD   = 0x01
KITOP_DEL   = 0x02
KITOP_UP    = 0x04
KITOP_LST   = 0x08

class KitOpsApp(KusuApp):
    def __init__(self, koinst):
        """Create instance of KitOpsApp. koinst is a KitOps instance."""

        KusuApp.__init__(self)

        self.koinst = koinst

        self.kitop = KITOP_NONE
        self.kit_name = ''
        self.kit_ver = ''
        self.kit_arch = ''

        def mutexAction(option, opt_str, value, parser):
            if parser.values.action is not None:
                self.printHelp()
                sys.stderr.write('Exactly one kit operation expected\n')
                sys.exit(EBAD_OP)
            elif '-a' in option._short_opts:
                setattr(parser.values, option.dest, 'add')
            elif '-e' in option._short_opts:
                setattr(parser.values, option.dest, 'delete')
            elif '-l' in option._short_opts:
                setattr(parser.values, option.dest, 'list')
 
        # setup command line parser
        self.parser.add_option('-a', '--add', dest='action',
                               help=self._('kitops_usage_add'), 
                               action='callback', callback=mutexAction)
        self.parser.add_option('-l', '--list', dest='action',
                               help=self._('kitops_usage_list'),
                               action='callback', callback=mutexAction)
        self.parser.add_option('-e', '--remove', dest='action',
                               help=self._('kitops_usage_remove'),
                               action='callback', callback=mutexAction)

        self.parser.add_option('-m', dest='media',
                               help=self._('kitops_usage_media'))

        self.parser.add_option('--kitname', dest='kitname',
                               help=self._('kitname'))
        self.parser.add_option('--kitversion', dest='kitversion',
                               help=self._('kitversion'))
        self.parser.add_option('--kitarch', dest='kitarch',
                               help=self._('kitarch'))

        self.parser.add_option('--dbdriver', dest='dbdriver',
                               help=self._('Database driver (sqlite, mysql)'))
        self.parser.add_option('--dbdatabase', dest='dbdatabase',
                               help=self._('Database'))
        self.parser.add_option('--dbuser', dest='dbuser',
                               help=self._('Database username'))
        self.parser.add_option('--dbpassword', dest='dbpassword',
                               help=self._('Database password'))

        self.parser.add_option('-p', '--prefix', dest='prefix',
                               help=SUPPRESS_HELP)

    def parseArgs(self):
        (options, args) = self.parser.parse_args()
        kl.debug("options: %s", options)
        kl.debug("args: %s", args)

        if args:
            sys.stderr.write("No more arguments expected. Remaining args: %s" %
                             args)
            self.printHelp()
            sys.exit(1)

        if options.action == 'add':
            if not options.media:
                media_choices = self.autoDetectMedia()
                found_kits = sorted(media_choices.keys())

                if len(found_kits) == 1:
                    kit_media = media_choices[found_kits[0]]
                else:
                    kit_media = selectKitMedia(media_choices)
            else:
                kit_media = options.media

            koinst.setKitMedia(kit_media)
            self.kitop = KITOP_ADD
        elif options.action == 'delete':
            self.kit_name = options.kitname
            self.kit_ver = options.kitversion
            self.kit_arch = options.kitarch
            self.kitop = KITOP_DEL
        elif options.action == 'list':
            self.kit_name = options.kitname
            self.kit_ver = options.kitversion
            self.kit_arch = options.kitarch
            self.kitop = KITOP_LST

        dbdriver = 'mysql'
        dbdatabase = 'kusudb'
        dbuser = 'apache'
        dbpassword = None

        if options.dbdriver:
            dbdriver = options.dbdriver
        if options.dbdatabase:
            dbdatabase = options.dbdatabase
        if options.dbuser:
            dbuser = options.dbuser
        if options.dbpassword:
            dbpassword = options.dbpassword

        self.koinst.setDB(db.DB(dbdriver, dbdatabase, dbuser, dbpassword))

        if options.prefix:
            kl.debug('Setting prefix to %s', options.prefix)
            self.koinst.setPrefix(options.prefix)

    def run(self):
        '''The main body of the application.  '''

        if os.getuid() != 0:
            self.printHelp()
            sys.stderr.write("You are not root! Please try again as root.\n")
            sys.exit(1)
        
        self.parseArgs()
        
        if self.kitop == KITOP_ADD:
            self.runAdd()

        elif self.kitop == KITOP_DEL:
            kl.debug('Performing delete operation')
            try:
                self.koinst.deleteKit(self.kit_name, self.kit_ver,
                                      self.kit_arch)
            except (AssertionError, KitNotInstalledError), e:
                kl.debug('FAIL performing delete operation')
                sys.stderr.write(e.args[0] + '\n')
                sys.exit(EKITDEL_FAIL)
            except DeleteKitsError, e:
                kl.debug('FAIL perfoming delete operation')
                for error in e.args[0]:
                    sys.stderr.write(error + '\n')
                sys.exit(EKITDEL_FAIL)

            kl.debug('SUCCESS performing delete operation')

        elif self.kitop == KITOP_LST:
            self.runListKit()

        else:
            kl.debug('Unknown operation requested: %d', self.kitop)
            return EBAD_OP

        return 0

    def runAdd(self):
        kl.debug('Performing add operation')
        try:
            self.koinst.addKitPrepare()
        except (CannotMountKitMediaError, UnrecognizedKitMediaError,
                AssertionError), e:
            kl.debug('FAIL performing add operation')
            sys.stderr.write(e.args[0])
            sys.exit(EKITLOC_FAIL)

        media_distro = self.koinst.getOSDist()
        if media_distro.ostype:
            self.runAddOSKit(media_distro)
        else:
            # we cannot identify the distro -- treat as ordinary kit
            try:
                self.koinst.addKit()
            except (KitAlreadyInstalledError, InstallKitRPMError,
                    NoKitsFoundError, AssertionError), e:
                kl.debug('FAIL performing add operation')
                sys.stderr.write(e.args[0])
                sys.exit(EKITLOC_FAIL)

        kl.debug('SUCCESS performing %s operation')

    def runAddOSKit(self, osdistro):
        try:
            kit = self.koinst.prepareOSKit(osdistro)
        except KitAlreadyInstalledError, e:
            kl.debug('FAIL performing add operation')
            sys.stderr.write(e.args[0])
            sys.exit(EKITLOC_FAIL)

        res = ''
        while 1:    #loop to go through all the media disks...
            if res:
                self.koinst.setKitMedia(res)
                kl.debug('Provided additional kit media: %s', res)
                self.koinst.addKitPrepare()

            try:
                self.koinst.copyOSKitMedia(kit)
            except CopyOSMediaError, e:
                kl.debug('FAIL performing add operation')
                sys.stderr.write(e.args[0])
                sys.exit(EKITLOC_FAIL)

            while not (res.lower() == 'y' or res == 'N'):
                res = raw_input('Any more disks for this OS kit? [y/N] ')

            if res == 'N':
                break

            print "Please insert next disk if installing from phys. media NOW"
            res = raw_input('(URI for next ISO | blank if phys. media | N to finish): ')
            res = string.strip(res)
            if res == 'N':
                break
      
        self.koinst.finalizeOSKit(kit)

    def runListKit(self):
        kl.debug('Performing list operation')

        headers = ['Kit', 'Description', 'Version', 'Architecture', 'OS Kit',
                   'Removable', 'Node Groups']

        max_lengths = []
        for x in xrange(len(headers)):
            max_lengths.append(len(headers[x]))

        kits = self.koinst.listKit(self.kit_name, self.kit_ver, self.kit_arch)

        kitlines = []
        for kit in kits:
            kitline = []

            kitline.append(kit.rname)
            kitline.append(kit.rdesc)
            kitline.append(kit.version)

            kitline.append('noarch')
            if kit.arch:
                kitline[-1] = kit.arch

            kitline.append('No')
            if kit.isOS:
                kitline[-1] = 'Yes'

            kitline.append('No')
            if kit.removable:
                kitline[-1] = 'Yes'

            # update maximum lengths
            for x in xrange(len(kitline)):
                linelengths = [len(l) for l in kitline[x].split('\n')]
                if max(linelengths) > max_lengths[x]:
                    max_lengths[x] = max(linelengths)

            ngnames = [ng.ngname for ng in
                       self.koinst.getNodeGroups(kit.rname, kit.version,
                                                 kit.arch)]
            kitline.append('\n'.join(ngnames))

            nglengths = [len(ngname) for ngname in ngnames]
            if max(nglengths) > max_lengths[-1]:
                max_lengths[-1] = max(nglengths)

            kitlines.append(kitline)

        printTable(headers, kitlines, max_lengths)

        kl.debug('SUCCESS performing list operation')

    def autoDetectMedia(self):
        """
        Attemp to find kit media.
        """

        import kusu.hardware.probe
        cdrom_dict = kusu.hardware.probe.getCDROM()
        cdrom_list = ['/dev/' + cd for cd in sorted(cdrom_dict.keys())]

        kl.debug('Media device list: %s', cdrom_list)

        available_kits = {}
        for cd in cdrom_list:
            try:
                self.koinst.mountMedia(cd)
                available_kits[self.koinst.determineKitName()] = cd
                self.koinst.unmountMedia()
            except CannotMountKitMediaError:
                pass
            except NoKitsFoundError:
                self.koinst.unmountMedia()

        if available_kits:
            return available_kits

        # at this point, we cannot find any kits
        kl.debug('Kit media neither specified nor found')
        sys.stderr.write('Kit media neither specified nor found')
        sys.exit(EKITLOC_FAIL)

    def selectKitMedia(self, choices):
        """
        Present a list of kits for the user to select from.
        """

        choice_names = sorted(choices.keys())
        choice_list = {}
        for i in range(len(choice_names)):
            choice_list[i + 1] = choice_name[i]

        while 1:
            for choice in choice_list:
                print '[%d]: %s' % (choice, choice_list[choice])

            res = raw_input('Select kit to add, 0 or ENTER to quit:')
            res = string.strip(res)
            if res == '' or res == '0':
                kl.debug('No kit selected, terminating')
                sys.exit(0)

            try:
                if int(res) in choice_list:
                    return choices[int(res)]
            except ValueError:
                pass

    def printHelp(self):
        self.parser.print_help()

def printTable(titles, entries, widths):
    horline = '+'
    for width in widths:
        horline += '-' * (width + 2) + '+'

    print horline

    line = '|'
    for x in xrange(len(titles)):
        line += ' ' + titles[x].ljust(widths[x]) + ' |'

    print line
    print horline

    for entry in entries:
        newlines = True
        while newlines:
            newlines = False

            line = '|'
            for x in xrange(len(entry)):
                newline = entry[x].find('\n')
                if newline == -1:
                    thisentry = entry[x]
                    nextentry = ''
                else:
                    newlines = True
                    thisentry = entry[x][:newline]
                    nextentry = entry[x][newline + 1:]

                line += ' ' + thisentry.ljust(widths[x]) + ' |'
                entry[x] = nextentry

            print line

    print horline

if __name__ == '__main__':
    koinst = KitOps()
    app = KitOpsApp(koinst)
    app.run()
