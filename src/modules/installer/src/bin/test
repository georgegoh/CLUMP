#!/usr/bin/env python
# $Id$
#
# Kusu Text Installer Framework.
#
# Copyright 2007 Platform Computing Corporation.
#
# Licensed under GPL version 2; See LICENSE file for details.
#
"""This module is the backbone of the Text Installer Framework. It performs the 
   presentation, navigation,and data validation tasks."""
__version__ = "$Revision$"

import sys
import logging
import snack
import gettext
import re
import os

import kusu.util.log as kusulog
# Sets up kusu logging
kl = kusulog.getKusuLog()
kl.addFileHandler()

from kusu.boot.tool import getPartitionMap, makeDev
from kusu.core.app import KusuApp
from kusu.ui.text.navigator import Navigator
from kusu.installer.testfactory import ScreenFactoryTest, runtimeDict

class KusuInstallerTest(Navigator, KusuApp):
    """Framework for displaying installation steps and screens.

    The KusuInstaller class takes a screenFactory object, and displays the
    screens in the order described in the screenFactory.

    """
    def __init__(self, screenFactory, screenTitle, showTrail=True):
        KusuApp.__init__(self)
        Navigator.__init__(self, screenFactory, screenTitle, showTrail)


if __name__ == '__main__':
    # kusu_dist = os.environ.get('KUSU_DIST', None)
    # if kusu_dist in ['rhel', 'fedora']:
    if os.access("/dev/tty3", os.W_OK):
        kl.addFileHandler('/dev/tty3')

    # get the map of the available partitions
    devmap = getPartitionMap()
    devices = devmap.keys()
    
    # set up a pattern of the devices we are interested in
    pat = re.compile('[hs]d\d*')
    for dev in devices:
        m = pat.match(dev)
        if m:
            makeDev('b',devmap[dev]['major'],devmap[dev]['minor'],dev)

    # create kusu installer instance
    screentitle = 'Project Kusu Cluster Toolkit %s (build %s)' % ('${VERSION_STR}', '${KUSU_REVISION}')
    ki = KusuInstallerTest(screenFactory=ScreenFactoryTest,
                       screenTitle=screentitle ,
                       showTrail=True)

    installer_return_code = ki.run()
    if installer_return_code is False:
        sys.exit(2)
    elif installer_return_code is None:
        sys.exit(1)

    import pprint
    pp = pprint.PrettyPrinter(indent=4)
    pp.pprint(ScreenFactoryTest.screens[-1].kusuApp)
    sys.exit(0)
