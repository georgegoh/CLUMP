#!/usr/bin/env python
# $Id: kusu_installer.py 247 2007-04-10 09:34:34Z ggoh $
#
# Kusu Text Installer Framework.
#
# Copyright 2007 Platform Computing Inc.
#
# Licensed under GPL version 2; See LICENSE file for details.
#
"""This module is the backbone of the Text Installer Framework. It performs the 
   presentation, navigation,and data validation tasks."""
__version__ = "$Revision: 247 $"

import sys
import logging
import snack
import gettext
import re
import os

import kusu.util.log as kusulog
# Sets up kusu logging
kl = kusulog.getKusuLog()
kl.addFileHandler()

from kusu.boot.tool import getPartitionMap, makeDev
from kusu.core.app import KusuApp
from kusu.ui.text.navigator import Navigator
from kusu.installer.kusufactory import ScreenFactoryImpl
from kusu.util.errors import *
from kusu.util import compat
from kusu.partitiontool.nodes import checkAndMakeNode

class KusuInstaller(Navigator, KusuApp):
    """Framework for displaying installation steps and screens.

    The KusuInstaller class takes a screenFactory object, and displays the
    screens in the order described in the screenFactory.

    """
    def __init__(self, screenFactory, screenTitle, showTrail=True):
        KusuApp.__init__(self)
        Navigator.__init__(self, screenFactory, screenTitle, showTrail)


def kusuErrorHandler(error):
    """This method is the last chance for a KusuError to be handled within the
       installer."""
    sys.exit(1)


def unknownExceptionHandler(error):
    """This method is the last chance for a general Exception to be handled
       within the installer."""
    sys.exit(1)


if __name__ == '__main__':
    # set up tty3 for logging output
    if os.access("/dev/tty3", os.W_OK):
        kl.addFileHandler('/dev/tty3')

    # setup disks.
    import kusu.hardware.probe
    disks_dict = kusu.hardware.probe.getDisks()
    disks_str = disks_dict.keys()
    for d in disks_dict.values():
        disks_str += d['partitions']
    disks_str += kusu.hardware.probe.getCDROM().keys()
  
    for dev in disks_str:
       checkAndMakeNode('/dev/' + dev)

    # create kusu installer instance
    screentitle = 'Project Kusu Cluster Toolkit %s (build %s)' % ('${VERSION_STR}', '${KUSU_REVISION}')
    ki = KusuInstaller(screenFactory=ScreenFactoryImpl,
                       screenTitle=screentitle ,
                       showTrail=True)

    try:
        installer_return_code = ki.run()
    except KusuError, e:
        kusuErrorHandler(e)
    except Exception, e:
        unknownExceptionHandler(e)

    if installer_return_code is False: # User requested exit
        sys.exit(2)
    elif installer_return_code is None: # Unknown exit
        sys.exit(1)

    sys.exit(0)
