#!/usr/bin/env python
# $Id$
#
# Copyright 2007 Platform Computing Corporation.
#
# Licensed under GPL version 2; See LICENSE for details.

import sys
import os
from kusu.core.app import KusuApp
from kusu.kit.devel import KitSrcFactory
from path import path

class BuildKit:
    """This class is the model class for the buildkit app."""
    
    def prepKitSrc(self,srcpath):
        """prepare the Kit source directory"""
        newkit = KitSrcFactory(srcpath)
        newkit.prepareSrcPath()
        
class App(KusuApp):
    """ Application class for boot-media-tool. """

    def __init__(self, bminst):
        """ App-specific initialization. """
        KusuApp.__init__(self)

        self.actions = {'prep':['dir'], 
            'make':['dir','iso']}

        # self.action and self.actionargs will hold the current action and its arguments            
        self.action = None 
        self.actionargs = None

        # an instance of the BuildKit for managing the actions        
        self.bkinst = bkinst
        self.usagestr = self._("""\
buildkit [-h|-v] <action> arg1=val1 arg2=val2 ...

buildkit is used to construct new Kusu Kits.

Options:

    -h          - Provide the tool help (this screen).
    -V          - Provide the version string.
    -H          - Provide usage examples.
    -f          - Force overwriting.

Actions:

    prep            - Prepares a new Kit directory. Available arguments for 
                      this action: 
                        dir=<name of kit directory to create>
    make            - Make a Kit iso. Available arguments for this action:
                        dir=<path of kit directory>
                        iso=<filepath of iso to create>

""")
        self.examples = self._("""\
Example operation usages:

    To prepare a new Kit called hellokit:
    # buildkit prep dir=hellokit

    To make the hello Kit:
    # buildkit make dir=hellokit iso=hellokit.iso

""")
        self.parser.set_usage(self.usagestr)

    def printUsageExit(self):
        """ Print usage text and exit. """
        self.stdoutMessage(self.usagestr)
        sys.exit(0)

    def printExamplesExit(self):
        """ Print examples text and exit. """
        self.stdoutMessage(self.examples)
        sys.exit(0)

    def printMsgExit(self, msg):
        """ Print msg and exit. """
        self.stdoutMessage(msg)
        sys.stdout.write(os.linesep)
        sys.exit(1)


    def handleArgPairs(self, arglist):
        """ Handle the argument list and return a dict of key-value pairs. """

        li = []
        d = {}

        for s in arglist:
            li2 = s.split('=')
            for s2 in li2: 
                if s2: li.append(s2)        

        # There should be even number of items in order to make pairs
        if not len(li) % 2: 
            # Collect the pairs
            while li:
                d[li[0].lower()] = li[1]
                del li[0:2]

        return d

    def parseargs(self):
        """ App-specific arguments goes here. """

        self.parser.add_option('-f','--force', action='store_true', dest='overwrite')
        self.parser.add_option('-H','--examples', action='store_true', dest='showexamples')
        self.options, self.args = self.parser.parse_args()


        if self.options.showexamples:
            self.printExamplesExit()

        if len(self.args) < 2:
            self.printUsageExit()


        # check if the first parsed argument is a supported action
        action = self.args[0]


        if action not in self.actions.keys():
            self.printUsageExit()
        d = self.handleArgPairs(self.args[1:])

        if not d:
            self.printUsageExit()

        # iterate keys in d and validate against the commands'
        # list of keys
        for k in d.keys():
            if k not in self.actions[action]:
                self.printUsageExit()

        self.action = action
        self.actionargs = d

    def run(self):
        """ Main launcher. """
        self.parseargs()

        # call the correct sub-handler for the action
        m = '_' + self.action.split('-')[0] \
            + ''.join([l.capitalize() for l in self.action.split('-')[1:]])

        handler = getattr(self,m)

        handler(self.actionargs)
    
    def _prep(self, args):
        """ Handler for prep action. args is a dict of supported key-value pairs for this action. """
        dirname = path(args['dir'])
        msg = self._('Preparing %(kitname)s directory..' % {'kitname':dirname.basename()})
        print msg
        self.bkinst.prepKitSrc(dirname)
        msg = self._('%(kitname)s directory created.' % {'kitname':dirname.basename()})
        print msg
        
    def _make(self, args):
        """ Handler for make action. args is a dict of supported key-value pairs for this action. """
        dirname = path(args['dir'])
        iso = path(args['iso']) 
        
        
if __name__ == '__main__':
	bkinst = BuildKit()
	app = App(bkinst)
	app.run()

